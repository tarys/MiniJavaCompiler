// CUP specification for a simple expression evaluator (w/ actions)

import java_cup.runtime.*;
import nametable.NameTable;
import nametable.NameTableBuilder;
import nametable.entries.Entry;
import java.util.List;
import java.util.LinkedList;


/* allows methods and variable to be placed directly within the generated parser class */
parser code {:
    private NameTableBuilder nameTableBuilder;


    public NameTableBuilder getNameTableBuilder(){
        return this.nameTableBuilder;
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        throw new Exception("Syntax error near symbol " + cur_token);
    }
:};

/* Preliminaries to set up and use the scanner.  */
scan with {: return getScanner().next_token(); :};

/* Provides code that will be executed by the parser before it asks for the first token */
init with {:
            nameTableBuilder =  new NameTableBuilder(new NameTable());
           :};

/* Terminals (tokens returned by the scanner). */
// Data types
terminal        INTEGER_TYPE;
terminal        FLOAT_TYPE;
terminal        CHAR_TYPE;
terminal        STRING_TYPE;
terminal        BOOLEAN_TYPE;

// Identifier
terminal    String  	IDENTIFIER;

// Keywords
terminal        CLASS_KEYWORD;
terminal		BOOLEAN_KEYWORD;
terminal		CHAR_KEYWORD;
terminal		ELSE_KEYWORD;
terminal		FLOAT_KEYWORD;
terminal		IF_KEYWORD;
terminal		INT_KEYWORD;
terminal		MAIN_KEYWORD;
terminal		NEW_KEYWORD;
terminal		PUBLIC_KEYWORD;
terminal		RETURN_KEYWORD;
terminal		STATIC_KEYWORD;
terminal		STRING_KEYWORD;
terminal		VOID_KEYWORD;
terminal		WHILE_KEYWORD;

// Operators
terminal        STOP;
terminal        PLUS;
terminal        MINUS;
terminal        UNARY_MINUS;
terminal        TIMES;
terminal        DIVIDE;
terminal        LOWER;
terminal        LOWER_EQUAL;
terminal		GREATER;
terminal		GREATER_EQUAL;
terminal		INSTANCEOF;
terminal		EQUAL;
terminal		NOT_EQUAL;
terminal		EXCLAMATION;
terminal		AND;
terminal		OR;
terminal		ASSIGN;
terminal		SYSTEM_OUT_PRINTLN;
terminal		SYSTEM_IN_READ;
terminal		BREAK;

// Delimiters
terminal		SEMICOLON;
terminal        COMMA;
terminal		LEFT_SQUARE_PARENTHESIS;
terminal		RIGHT_SQUARE_PARENTHESIS;
terminal		LEFT_PARENTHESIS;
terminal		RIGHT_PARENTHESIS;
terminal		LEFT_FIG_PARENTHESIS;
terminal		RIGHT_FIG_PARENTHESIS;

/* Non-terminals */

non terminal                goal;
non terminal                compilation_unit;
non terminal    Entry       main_class;
non terminal    List<Entry> main_class_methods_declaration;
non terminal    Entry       main_method_declaration;
non terminal    List<Entry> classes_declaration;
non terminal    Entry       class_declaration;
non terminal    List<Entry> fields_declaration;
non terminal    Entry       field_declaration;
non terminal    List<Entry> methods_declaration;
non terminal    Entry       method_declaration;
non terminal    List<Entry> method_params_declaration;
non terminal    List<Entry> params_list_declaration;
non terminal    Entry       param_declaration;
non terminal    Entry       block;
non terminal    List<Entry> variables_declaration;
non terminal    Entry       variable_declaration;
non terminal                statements;
non terminal                statement;
non terminal                assignment_statement;
non terminal                if_statement;
non terminal                while_statement;
non terminal                method_call_statement;
non terminal                input_statement;
non terminal                output_statement;
non terminal    String      type;
non terminal    String      reference_type;
non terminal                expression;
non terminal                method_call;
non terminal                actual_params_list;

/* Precedences */
precedence left     ASSIGN;
precedence left     OR;
precedence left     AND;
precedence left     EQUAL, NOT_EQUAL;
precedence left     INSTANCEOF, LOWER,LOWER_EQUAL, GREATER, GREATER_EQUAL;
precedence left     PLUS, MINUS;
precedence left     TIMES, DIVIDE;
precedence right    EXCLAMATION, UNARY_MINUS, NEW_KEYWORD;
precedence left     STOP;
precedence left     LEFT_PARENTHESIS, RIGHT_PARENTHESIS;

/* The grammar */
start with goal;

goal                            ::= compilation_unit;

compilation_unit                ::= main_class
                                  | main_class classes_declaration
                                  | classes_declaration main_class
                                  | classes_declaration main_class classes_declaration;

main_class                      ::= PUBLIC_KEYWORD CLASS_KEYWORD IDENTIFIER:name LEFT_FIG_PARENTHESIS
                                        fields_declaration:fieldsList
                                        main_class_methods_declaration:methodsList
                                    RIGHT_FIG_PARENTHESIS
                                   {:
                                        RESULT = parser.getNameTableBuilder().declareMainClass(name, fieldsList, methodsList);
                                   :}
                                  | PUBLIC_KEYWORD CLASS_KEYWORD IDENTIFIER:name LEFT_FIG_PARENTHESIS
                                        main_class_methods_declaration:methodsList
                                    RIGHT_FIG_PARENTHESIS
                                   {:
                                        RESULT = parser.getNameTableBuilder().declareMainClass(name, null, methodsList);
                                   :}
                                    ;

main_class_methods_declaration  ::= main_method_declaration:mainMethod
                                   {:
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(mainMethod);
                                   :}
                                  | main_method_declaration:mainMethod methods_declaration:methodsList
                                   {:
                                        RESULT = methodsList;
                                        RESULT.add(mainMethod);
                                   :}
                                  | methods_declaration:methodsList main_method_declaration:mainMethod
                                   {:
                                        RESULT = methodsList;
                                        RESULT.add(mainMethod);
                                   :}
                                  | methods_declaration:methodsListBefore main_method_declaration:mainMethod methods_declaration:methodsListAfter
                                   {:
                                        RESULT = methodsListBefore;
                                        RESULT.add(mainMethod);
                                        RESULT.addAll(methodsListAfter);
                                   :}
                                  ;

main_method_declaration         ::= PUBLIC_KEYWORD STATIC_KEYWORD VOID_KEYWORD MAIN_KEYWORD
                                    LEFT_PARENTHESIS STRING_KEYWORD LEFT_SQUARE_PARENTHESIS RIGHT_SQUARE_PARENTHESIS
                                    IDENTIFIER RIGHT_PARENTHESIS LEFT_FIG_PARENTHESIS
                                        block:innerBlock
                                    RIGHT_FIG_PARENTHESIS
                                    {:
                                        RESULT = parser.getNameTableBuilder().declareMainMethod(innerBlock);
                                    :}
                                   ;

classes_declaration             ::= classes_declaration:classesList class_declaration:classDeclaration
                                   {:
                                        classesList.add(classDeclaration);
                                        RESULT = classesList;
                                   :}
                                  | class_declaration:classDeclaration
                                   {:
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(classDeclaration);
                                   :}
                                  ;

class_declaration               ::= CLASS_KEYWORD IDENTIFIER:name LEFT_FIG_PARENTHESIS
                                        fields_declaration:fieldsList
                                        methods_declaration:methodsList
                                    RIGHT_FIG_PARENTHESIS
                                   {:
                                        RESULT = parser.getNameTableBuilder().declareClass(name, fieldsList, methodsList);
                                   :}
                                  | CLASS_KEYWORD IDENTIFIER:name LEFT_FIG_PARENTHESIS
                                        fields_declaration:fieldsList
                                    RIGHT_FIG_PARENTHESIS
                                   {:
                                        RESULT = parser.getNameTableBuilder().declareClass(name, fieldsList, null);
                                   :}
                                  | CLASS_KEYWORD IDENTIFIER:name LEFT_FIG_PARENTHESIS
                                        methods_declaration:methodsList
                                    RIGHT_FIG_PARENTHESIS
                                   {:
                                        RESULT = parser.getNameTableBuilder().declareClass(name, null, methodsList);
                                   :}
                                  | CLASS_KEYWORD IDENTIFIER:name LEFT_FIG_PARENTHESIS
                                    RIGHT_FIG_PARENTHESIS
                                   {:
                                        RESULT = parser.getNameTableBuilder().declareClass(name, null, null);
                                   :}
                                  ;

fields_declaration              ::= fields_declaration:fieldsList field_declaration:field
                                   {:
                                        fieldsList.add(field);
                                        RESULT = fieldsList;
                                   :}
                                  | field_declaration:field
                                   {:
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(field);
                                   :}
                                  ;

field_declaration               ::= PUBLIC_KEYWORD type:type IDENTIFIER:name ASSIGN expression:value SEMICOLON
                                   {:
                                        RESULT = parser.getNameTableBuilder().declareField(name, type, value);
                                   :}
                                  | PUBLIC_KEYWORD type:type IDENTIFIER:name SEMICOLON
                                   {:
                                        RESULT = parser.getNameTableBuilder().declareField(name, type);
                                   :}
                                  ;

methods_declaration             ::= methods_declaration:methodsList method_declaration:method
                                   {:
                                        methodsList.add(method);
                                        RESULT = methodsList;
                                   :}
                                  | method_declaration:method
                                   {:
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(method);
                                   :}
                                  ;

method_declaration              ::= PUBLIC_KEYWORD type:returnType IDENTIFIER:name method_params_declaration:paramsList
                                    LEFT_FIG_PARENTHESIS
                                        block:innerBlock
                                        RETURN_KEYWORD expression SEMICOLON
                                    RIGHT_FIG_PARENTHESIS
                                   {:
                                        RESULT = parser.getNameTableBuilder().declareMethod(name, returnType, paramsList, innerBlock);
                                   :}
                                  | PUBLIC_KEYWORD type:returnType IDENTIFIER:name method_params_declaration:paramsList
                                    LEFT_FIG_PARENTHESIS
                                        RETURN_KEYWORD expression SEMICOLON
                                    RIGHT_FIG_PARENTHESIS
                                   {:
                                        RESULT = parser.getNameTableBuilder().declareMethod(name, returnType, paramsList);
                                   :}
                                  | PUBLIC_KEYWORD VOID_KEYWORD IDENTIFIER:name method_params_declaration:paramsList
                                    LEFT_FIG_PARENTHESIS
                                        block:innerBlock
                                    RIGHT_FIG_PARENTHESIS
                                   {:
                                        RESULT = parser.getNameTableBuilder().declareMethod(name, "void", paramsList, innerBlock);
                                   :}
                                  | PUBLIC_KEYWORD VOID_KEYWORD IDENTIFIER:name method_params_declaration:paramsList
                                    LEFT_FIG_PARENTHESIS
                                    RIGHT_FIG_PARENTHESIS
                                   {:
                                        RESULT = parser.getNameTableBuilder().declareMethod(name, "void", paramsList);
                                   :}
                                    ;

method_params_declaration       ::= LEFT_PARENTHESIS RIGHT_PARENTHESIS
                                  | LEFT_PARENTHESIS params_list_declaration:paramsList RIGHT_PARENTHESIS
                                    {:
                                        RESULT = paramsList;
                                    :}
                                  ;

params_list_declaration         ::= params_list_declaration:paramsList COMMA param_declaration:param
                                    {:
                                        paramsList.add(param);
                                        RESULT = paramsList;
                                    :}
                                  | param_declaration:param
                                    {:
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(param);
                                    :}
                                  ;

param_declaration               ::= type:type IDENTIFIER:name
                                     {:
                                           RESULT = parser.getNameTableBuilder().declareMethodParameter(name, type);
                                     :}
                                    ;

block                           ::= variables_declaration:variablesEntriesList
                                   {:
                                       RESULT = parser.getNameTableBuilder().declareBlock(variablesEntriesList);
                                   :}
                                  | variables_declaration:variablesEntriesList statements
                                   {:
                                       RESULT = parser.getNameTableBuilder().declareBlock(variablesEntriesList);
                                   :}
                                  | statements
                                   {:
                                       RESULT = parser.getNameTableBuilder().declareBlock();
                                   :}
                                  ;

variables_declaration           ::= variables_declaration:variablesEntriesList variable_declaration:variableEntry
                                    {:
                                        variablesEntriesList.add(variableEntry);
                                        RESULT = variablesEntriesList;
                                    :}
                                  | variable_declaration:variableEntry
                                  {:
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(variableEntry);
                                  :}
                                  ;

variable_declaration            ::= type:type IDENTIFIER:name SEMICOLON
                                    {:
                                        RESULT = parser.getNameTableBuilder().declareVariable(name, type);
                                    :}
                                  | type:type IDENTIFIER:name ASSIGN expression:value SEMICOLON
                                    {:
                                        RESULT = parser.getNameTableBuilder().declareVariable(name, type, value);
                                    :}
                                  ;
statements                      ::= statements statement
                                  | statement;

statement                       ::= assignment_statement
                                  | if_statement
                                  | while_statement
                                  | method_call_statement
                                  | input_statement
                                  | output_statement;

assignment_statement            ::= IDENTIFIER ASSIGN expression SEMICOLON;

if_statement                    ::= IF_KEYWORD LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
                                    LEFT_FIG_PARENTHESIS
                                        block
                                    RIGHT_FIG_PARENTHESIS
                                  | IF_KEYWORD LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
                                    LEFT_FIG_PARENTHESIS
                                        block
                                    RIGHT_FIG_PARENTHESIS
                                    ELSE_KEYWORD LEFT_FIG_PARENTHESIS
                                        block
                                    RIGHT_FIG_PARENTHESIS;

while_statement                 ::= WHILE_KEYWORD
                                    LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
                                    LEFT_FIG_PARENTHESIS
                                        block
                                    RIGHT_FIG_PARENTHESIS;

method_call_statement           ::= expression SEMICOLON;

input_statement                 ::= type IDENTIFIER ASSIGN SYSTEM_IN_READ
                                    LEFT_PARENTHESIS RIGHT_PARENTHESIS SEMICOLON;

output_statement                ::= SYSTEM_OUT_PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON;

type                            ::= BOOLEAN_KEYWORD
                                    {: RESULT = "boolean"; :}
                                  | CHAR_KEYWORD
                                    {: RESULT = "char"; :}
                                  | FLOAT_KEYWORD
                                    {: RESULT = "float"; :}
                                  | INT_KEYWORD
                                    {: RESULT = "int"; :}
                                  | STRING_KEYWORD
                                    {: RESULT = "String"; :}
                                  | reference_type:value
                                    {: RESULT = value; :}
                                  ;

reference_type                  ::= IDENTIFIER:name
                                    {:
                                        RESULT = name;
                                    :};

expression                      ::= expression STOP method_call
                                  | method_call
                                  | expression INSTANCEOF expression
                                  | EXCLAMATION expression
                                  | LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
                                  | expression PLUS expression
                                  | expression MINUS expression
                                  | expression TIMES expression
                                  | expression DIVIDE expression
                                  | expression LOWER expression
                                  | expression LOWER_EQUAL expression
                                  | expression GREATER expression
                                  | expression GREATER_EQUAL expression
                                  | expression EQUAL expression
                                  | expression NOT_EQUAL expression
                                  | expression AND expression
                                  | expression OR expression
                                  | INTEGER_TYPE:value
                                  {:
                                        RESULT = value;
                                  :}
                                  | FLOAT_TYPE:value
                                  {:
                                        RESULT = value;
                                  :}
                                  | BOOLEAN_TYPE:value
                                  {:
                                        RESULT = value;
                                  :}
                                  | STRING_TYPE:value
                                  {:
                                        RESULT = value;
                                  :}
                                  | CHAR_TYPE:value
                                  {:
                                        RESULT = value;
                                  :}
                                  | IDENTIFIER
                                  | NEW_KEYWORD IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
                                  | BREAK
                                  | MINUS expression
                                    %prec UNARY_MINUS;

method_call                     ::= IDENTIFIER LEFT_PARENTHESIS  RIGHT_PARENTHESIS
                                  | IDENTIFIER LEFT_PARENTHESIS actual_params_list  RIGHT_PARENTHESIS;

actual_params_list              ::= actual_params_list COMMA expression
                                  | expression;
