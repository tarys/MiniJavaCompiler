
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 09 23:26:13 EEST 2012
//----------------------------------------------------

package sa;

import java_cup.runtime.Symbol;
import nametable.NameTableBuilder;
import nametable.entries.Entry;
import semantic.SemanticAnalyzer;
import java.util.LinkedList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 09 23:26:13 EEST 2012
  */
public class LR1Analyzer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public LR1Analyzer() {super();}

  /** Constructor which sets the default scanner. */
  public LR1Analyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LR1Analyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\004\011\000\002\004\010\000\002\005\003\000" +
    "\002\005\004\000\002\005\004\000\002\005\005\000\002" +
    "\006\017\000\002\007\004\000\002\007\003\000\002\010" +
    "\010\000\002\010\007\000\002\010\007\000\002\010\006" +
    "\000\002\011\004\000\002\011\003\000\002\012\010\000" +
    "\002\012\006\000\002\013\004\000\002\013\003\000\002" +
    "\014\014\000\002\014\013\000\002\014\011\000\002\014" +
    "\010\000\002\015\004\000\002\015\005\000\002\016\005" +
    "\000\002\016\003\000\002\017\004\000\002\020\003\000" +
    "\002\020\004\000\002\020\003\000\002\021\004\000\002" +
    "\021\003\000\002\022\005\000\002\022\007\000\002\023" +
    "\004\000\002\023\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\025\006\000\002\026\011\000\002\026\015\000\002" +
    "\027\011\000\002\030\004\000\002\031\007\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\033\003\000" +
    "\002\034\010\000\002\034\007\000\002\034\006\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\004\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\006\000\002\034\004\000\002\035\005\000\002" +
    "\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\006\012\007\023\004\001\002\000\004\012" +
    "\264\001\002\000\004\002\263\001\002\000\006\012\007" +
    "\023\004\001\002\000\004\011\015\001\002\000\004\002" +
    "\000\001\002\000\006\002\uffff\012\007\001\002\000\010" +
    "\002\ufff3\012\ufff3\023\ufff3\001\002\000\006\002\ufffe\012" +
    "\007\001\002\000\010\002\ufff4\012\ufff4\023\ufff4\001\002" +
    "\000\004\062\016\001\002\000\006\023\020\063\024\001" +
    "\002\000\006\023\020\063\257\001\002\000\020\011\037" +
    "\013\031\014\033\016\035\020\032\026\030\027\040\001" +
    "\002\000\006\023\uffed\063\uffed\001\002\000\006\023\025" +
    "\063\027\001\002\000\006\023\uffe9\063\uffe9\001\002\000" +
    "\010\002\uffef\012\uffef\023\uffef\001\002\000\020\011\037" +
    "\013\031\014\033\016\035\020\032\026\030\027\040\001" +
    "\002\000\006\023\uffea\063\uffea\001\002\000\010\002\ufff0" +
    "\012\ufff0\023\ufff0\001\002\000\004\011\uffc7\001\002\000" +
    "\004\011\uffcb\001\002\000\004\011\uffc8\001\002\000\004" +
    "\011\uffca\001\002\000\004\011\233\001\002\000\004\011" +
    "\uffc9\001\002\000\004\011\uffc6\001\002\000\004\011\uffc5" +
    "\001\002\000\004\011\041\001\002\000\004\060\042\001" +
    "\002\000\020\011\037\013\031\014\033\016\035\020\032" +
    "\026\030\061\223\001\002\000\004\062\044\001\002\000" +
    "\052\004\066\005\056\006\045\007\064\010\071\011\055" +
    "\013\031\014\033\016\035\017\077\020\032\022\074\026" +
    "\030\030\063\033\072\046\050\052\046\053\054\060\062" +
    "\063\060\001\002\000\044\031\uffac\032\uffac\033\uffac\035" +
    "\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac" +
    "\044\uffac\045\uffac\047\uffac\050\uffac\054\uffac\055\uffac\061" +
    "\uffac\001\002\000\004\060\217\001\002\000\042\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\017\uffd7\022" +
    "\uffd7\024\uffd7\030\uffd7\033\uffd7\046\uffd7\052\uffd7\053\uffd7" +
    "\060\uffd7\063\uffd7\001\002\000\030\004\066\005\056\006" +
    "\045\007\064\010\071\011\102\022\074\033\072\046\050" +
    "\053\054\060\062\001\002\000\042\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\017\uffd5\022\uffd5\024\uffd5" +
    "\030\uffd5\033\uffd5\046\uffd5\052\uffd5\053\uffd5\060\uffd5\063" +
    "\uffd5\001\002\000\004\011\211\001\002\000\042\004\uffd4" +
    "\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\017\uffd4\022" +
    "\uffd4\024\uffd4\030\uffd4\033\uffd4\046\uffd4\052\uffd4\053\uffd4" +
    "\060\uffd4\063\uffd4\001\002\000\004\060\207\001\002\000" +
    "\046\011\uffc5\031\uffab\032\uffab\033\uffab\035\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\047\uffab\050\uffab\051\164\054\uffab\060\103\001\002" +
    "\000\044\031\uffaf\032\uffaf\033\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\047\uffaf\050\uffaf\054\uffaf\055\uffaf\061\uffaf\001\002\000" +
    "\042\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6" +
    "\017\uffd6\022\uffd6\024\uffd6\030\uffd6\033\uffd6\046\uffd6\052" +
    "\uffd6\053\uffd6\060\uffd6\063\uffd6\001\002\000\006\023\uffe5" +
    "\063\uffe5\001\002\000\004\063\206\001\002\000\030\004" +
    "\066\005\056\006\045\007\064\010\071\011\102\022\074" +
    "\033\072\046\050\053\054\060\062\001\002\000\004\060" +
    "\176\001\002\000\044\031\uffad\032\uffad\033\uffad\035\uffad" +
    "\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044" +
    "\uffad\045\uffad\047\uffad\050\uffad\054\uffad\055\uffad\061\uffad" +
    "\001\002\000\040\031\117\032\115\033\107\035\121\036" +
    "\111\037\112\040\124\041\113\042\122\043\116\044\114" +
    "\045\120\047\110\050\123\054\175\001\002\000\044\031" +
    "\uffb0\032\uffb0\033\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\047\uffb0\050" +
    "\uffb0\054\uffb0\055\uffb0\061\uffb0\001\002\000\054\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\013\uffdb\014" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb\024\uffdb\026\uffdb" +
    "\030\uffdb\033\uffdb\046\uffdb\052\uffdb\053\uffdb\060\uffdb\063" +
    "\uffdb\001\002\000\042\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\017\uffd2\022\uffd2\024\uffd2\030\uffd2\033" +
    "\uffd2\046\uffd2\052\uffd2\053\uffd2\060\uffd2\063\uffd2\001\002" +
    "\000\044\031\uffae\032\uffae\033\uffae\035\uffae\036\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae" +
    "\047\uffae\050\uffae\054\uffae\055\uffae\061\uffae\001\002\000" +
    "\030\004\066\005\056\006\045\007\064\010\071\011\102" +
    "\022\074\033\072\046\050\053\054\060\062\001\002\000" +
    "\054\004\066\005\056\006\045\007\064\010\071\011\055" +
    "\013\031\014\033\016\035\017\077\020\032\022\074\024" +
    "\uffdf\026\030\030\063\033\072\046\050\052\046\053\054" +
    "\060\062\063\uffdf\001\002\000\004\011\167\001\002\000" +
    "\042\004\066\005\056\006\045\007\064\010\071\011\163" +
    "\017\077\022\074\024\uffdd\030\063\033\072\046\050\052" +
    "\046\053\054\060\062\063\uffdd\001\002\000\042\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\017\uffd3\022" +
    "\uffd3\024\uffd3\030\uffd3\033\uffd3\046\uffd3\052\uffd3\053\uffd3" +
    "\060\uffd3\063\uffd3\001\002\000\004\060\100\001\002\000" +
    "\030\004\066\005\056\006\045\007\064\010\071\011\102" +
    "\022\074\033\072\046\050\053\054\060\062\001\002\000" +
    "\040\031\117\032\115\033\107\035\121\036\111\037\112" +
    "\040\124\041\113\042\122\043\116\044\114\045\120\047" +
    "\110\050\123\061\152\001\002\000\046\031\uffab\032\uffab" +
    "\033\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\047\uffab\050\uffab\054\uffab" +
    "\055\uffab\060\103\061\uffab\001\002\000\032\004\066\005" +
    "\056\006\045\007\064\010\071\011\102\022\074\033\072" +
    "\046\050\053\054\060\062\061\104\001\002\000\044\031" +
    "\uffc1\032\uffc1\033\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\047\uffc1\050" +
    "\uffc1\054\uffc1\055\uffc1\061\uffc1\001\002\000\006\055\136" +
    "\061\151\001\002\000\042\031\117\032\115\033\107\035" +
    "\121\036\111\037\112\040\124\041\113\042\122\043\116" +
    "\044\114\045\120\047\110\050\123\055\uffa7\061\uffa7\001" +
    "\002\000\030\004\066\005\056\006\045\007\064\010\071" +
    "\011\102\022\074\033\072\046\050\053\054\060\062\001" +
    "\002\000\030\004\066\005\056\006\045\007\064\010\071" +
    "\011\102\022\074\033\072\046\050\053\054\060\062\001" +
    "\002\000\030\004\066\005\056\006\045\007\064\010\071" +
    "\011\102\022\074\033\072\046\050\053\054\060\062\001" +
    "\002\000\030\004\066\005\056\006\045\007\064\010\071" +
    "\011\102\022\074\033\072\046\050\053\054\060\062\001" +
    "\002\000\030\004\066\005\056\006\045\007\064\010\071" +
    "\011\102\022\074\033\072\046\050\053\054\060\062\001" +
    "\002\000\030\004\066\005\056\006\045\007\064\010\071" +
    "\011\102\022\074\033\072\046\050\053\054\060\062\001" +
    "\002\000\030\004\066\005\056\006\045\007\064\010\071" +
    "\011\102\022\074\033\072\046\050\053\054\060\062\001" +
    "\002\000\030\004\066\005\056\006\045\007\064\010\071" +
    "\011\102\022\074\033\072\046\050\053\054\060\062\001" +
    "\002\000\004\011\132\001\002\000\030\004\066\005\056" +
    "\006\045\007\064\010\071\011\102\022\074\033\072\046" +
    "\050\053\054\060\062\001\002\000\030\004\066\005\056" +
    "\006\045\007\064\010\071\011\102\022\074\033\072\046" +
    "\050\053\054\060\062\001\002\000\030\004\066\005\056" +
    "\006\045\007\064\010\071\011\102\022\074\033\072\046" +
    "\050\053\054\060\062\001\002\000\030\004\066\005\056" +
    "\006\045\007\064\010\071\011\102\022\074\033\072\046" +
    "\050\053\054\060\062\001\002\000\030\004\066\005\056" +
    "\006\045\007\064\010\071\011\102\022\074\033\072\046" +
    "\050\053\054\060\062\001\002\000\044\031\117\032\115" +
    "\033\107\035\121\036\111\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\047\uffb7\050\uffb7\054\uffb7" +
    "\055\uffb7\061\uffb7\001\002\000\044\031\117\032\115\033" +
    "\107\035\121\036\111\037\112\040\124\041\113\042\122" +
    "\043\116\044\114\045\120\047\110\050\uffb1\054\uffb1\055" +
    "\uffb1\061\uffb1\001\002\000\044\031\117\032\115\033\107" +
    "\035\121\036\111\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\047\uffb5\050\uffb5\054\uffb5\055\uffb5" +
    "\061\uffb5\001\002\000\044\031\117\032\uffba\033\uffba\035" +
    "\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba" +
    "\044\uffba\045\uffba\047\uffba\050\uffba\054\uffba\055\uffba\061" +
    "\uffba\001\002\000\044\031\117\032\115\033\107\035\121" +
    "\036\111\037\112\040\124\041\113\042\122\043\116\044" +
    "\uffb3\045\uffb3\047\uffb3\050\uffb3\054\uffb3\055\uffb3\061\uffb3" +
    "\001\002\000\004\060\133\001\002\000\032\004\066\005" +
    "\056\006\045\007\064\010\071\011\102\022\074\033\072" +
    "\046\050\053\054\060\062\061\134\001\002\000\044\031" +
    "\uffc3\032\uffc3\033\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\047\uffc3\050" +
    "\uffc3\054\uffc3\055\uffc3\061\uffc3\001\002\000\006\055\136" +
    "\061\137\001\002\000\030\004\066\005\056\006\045\007" +
    "\064\010\071\011\102\022\074\033\072\046\050\053\054" +
    "\060\062\001\002\000\044\031\uffc4\032\uffc4\033\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\047\uffc4\050\uffc4\054\uffc4\055\uffc4\061" +
    "\uffc4\001\002\000\042\031\117\032\115\033\107\035\121" +
    "\036\111\037\112\040\124\041\113\042\122\043\116\044" +
    "\114\045\120\047\110\050\123\055\uffa8\061\uffa8\001\002" +
    "\000\044\031\117\032\115\033\107\035\121\036\111\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\047\uffc0\050\uffc0\054\uffc0\055\uffc0\061\uffc0\001\002\000" +
    "\044\031\117\032\uffbc\033\uffbc\035\121\036\111\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\047" +
    "\uffbc\050\uffbc\054\uffbc\055\uffbc\061\uffbc\001\002\000\044" +
    "\031\117\032\115\033\107\035\121\036\111\037\112\040" +
    "\124\041\113\042\122\043\116\044\uffb4\045\uffb4\047\uffb4" +
    "\050\uffb4\054\uffb4\055\uffb4\061\uffb4\001\002\000\044\031" +
    "\117\032\115\033\107\035\121\036\111\037\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\047\uffb6\050" +
    "\uffb6\054\uffb6\055\uffb6\061\uffb6\001\002\000\044\031\117" +
    "\032\115\033\107\035\121\036\111\037\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\047\uffb8\050\uffb8" +
    "\054\uffb8\055\uffb8\061\uffb8\001\002\000\044\031\117\032" +
    "\uffb9\033\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\045\uffb9\047\uffb9\050\uffb9\054" +
    "\uffb9\055\uffb9\061\uffb9\001\002\000\044\031\117\032\115" +
    "\033\107\035\121\036\111\037\112\040\124\041\113\042" +
    "\122\043\116\044\114\045\120\047\uffb2\050\uffb2\054\uffb2" +
    "\055\uffb2\061\uffb2\001\002\000\044\031\117\032\uffbb\033" +
    "\uffbb\035\121\036\111\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\047\uffbb\050\uffbb\054\uffbb\055" +
    "\uffbb\061\uffbb\001\002\000\044\031\uffc2\032\uffc2\033\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\047\uffc2\050\uffc2\054\uffc2\055\uffc2" +
    "\061\uffc2\001\002\000\004\062\153\001\002\000\050\004" +
    "\066\005\056\006\045\007\064\010\071\011\055\013\031" +
    "\014\033\016\035\017\077\020\032\022\074\026\030\030" +
    "\063\033\072\046\050\052\046\053\054\060\062\001\002" +
    "\000\004\063\155\001\002\000\044\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\015\156\017\uffd0\022\uffd0" +
    "\024\uffd0\030\uffd0\033\uffd0\046\uffd0\052\uffd0\053\uffd0\060" +
    "\uffd0\063\uffd0\001\002\000\004\062\157\001\002\000\050" +
    "\004\066\005\056\006\045\007\064\010\071\011\055\013" +
    "\031\014\033\016\035\017\077\020\032\022\074\026\030" +
    "\030\063\033\072\046\050\052\046\053\054\060\062\001" +
    "\002\000\004\063\161\001\002\000\042\004\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\017\uffcf\022\uffcf\024" +
    "\uffcf\030\uffcf\033\uffcf\046\uffcf\052\uffcf\053\uffcf\060\uffcf" +
    "\063\uffcf\001\002\000\042\004\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\017\uffd8\022\uffd8\024\uffd8\030\uffd8" +
    "\033\uffd8\046\uffd8\052\uffd8\053\uffd8\060\uffd8\063\uffd8\001" +
    "\002\000\044\031\uffab\032\uffab\033\uffab\035\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\047\uffab\050\uffab\051\164\054\uffab\060\103\001\002" +
    "\000\030\004\066\005\056\006\045\007\064\010\071\011" +
    "\102\022\074\033\072\046\050\053\054\060\062\001\002" +
    "\000\040\031\117\032\115\033\107\035\121\036\111\037" +
    "\112\040\124\041\113\042\122\043\116\044\114\045\120" +
    "\047\110\050\123\054\166\001\002\000\042\004\uffd1\005" +
    "\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\017\uffd1\022\uffd1" +
    "\024\uffd1\030\uffd1\033\uffd1\046\uffd1\052\uffd1\053\uffd1\060" +
    "\uffd1\063\uffd1\001\002\000\004\060\170\001\002\000\004" +
    "\061\171\001\002\000\044\031\uffaa\032\uffaa\033\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\047\uffaa\050\uffaa\054\uffaa\055\uffaa\061" +
    "\uffaa\001\002\000\054\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\013\uffdc\014\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\022\uffdc\024\uffdc\026\uffdc\030\uffdc\033\uffdc\046\uffdc" +
    "\052\uffdc\053\uffdc\060\uffdc\063\uffdc\001\002\000\042\004" +
    "\066\005\056\006\045\007\064\010\071\011\163\017\077" +
    "\022\074\024\uffde\030\063\033\072\046\050\052\046\053" +
    "\054\060\062\063\uffde\001\002\000\044\031\117\032\uffa9" +
    "\033\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\047\uffa9\050\uffa9\054\uffa9" +
    "\055\uffa9\061\uffa9\001\002\000\042\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\017\uffcd\022\uffcd\024\uffcd" +
    "\030\uffcd\033\uffcd\046\uffcd\052\uffcd\053\uffcd\060\uffcd\063" +
    "\uffcd\001\002\000\030\004\066\005\056\006\045\007\064" +
    "\010\071\011\102\022\074\033\072\046\050\053\054\060" +
    "\062\001\002\000\040\031\117\032\115\033\107\035\121" +
    "\036\111\037\112\040\124\041\113\042\122\043\116\044" +
    "\114\045\120\047\110\050\123\061\200\001\002\000\004" +
    "\062\201\001\002\000\050\004\066\005\056\006\045\007" +
    "\064\010\071\011\055\013\031\014\033\016\035\017\077" +
    "\020\032\022\074\026\030\030\063\033\072\046\050\052" +
    "\046\053\054\060\062\001\002\000\004\063\203\001\002" +
    "\000\042\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011" +
    "\uffce\017\uffce\022\uffce\024\uffce\030\uffce\033\uffce\046\uffce" +
    "\052\uffce\053\uffce\060\uffce\063\uffce\001\002\000\040\031" +
    "\117\032\115\033\107\035\121\036\111\037\112\040\124" +
    "\041\113\042\122\043\116\044\114\045\120\047\110\050" +
    "\123\061\205\001\002\000\044\031\uffbd\032\uffbd\033\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\047\uffbd\050\uffbd\054\uffbd\055\uffbd" +
    "\061\uffbd\001\002\000\006\023\uffe6\063\uffe6\001\002\000" +
    "\004\061\210\001\002\000\044\031\uffbf\032\uffbf\033\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\047\uffbf\050\uffbf\054\uffbf\055\uffbf" +
    "\061\uffbf\001\002\000\006\051\213\054\212\001\002\000" +
    "\054\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\013\uffda\014\uffda\016\uffda\017\uffda\020\uffda\022\uffda\024" +
    "\uffda\026\uffda\030\uffda\033\uffda\046\uffda\052\uffda\053\uffda" +
    "\060\uffda\063\uffda\001\002\000\030\004\066\005\056\006" +
    "\045\007\064\010\071\011\102\022\074\033\072\046\050" +
    "\053\054\060\062\001\002\000\040\031\117\032\115\033" +
    "\107\035\121\036\111\037\112\040\124\041\113\042\122" +
    "\043\116\044\114\045\120\047\110\050\123\054\215\001" +
    "\002\000\054\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\013\uffd9\014\uffd9\016\uffd9\017\uffd9\020\uffd9\022" +
    "\uffd9\024\uffd9\026\uffd9\030\uffd9\033\uffd9\046\uffd9\052\uffd9" +
    "\053\uffd9\060\uffd9\063\uffd9\001\002\000\044\031\117\032" +
    "\uffbe\033\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\045\uffbe\047\uffbe\050\uffbe\054" +
    "\uffbe\055\uffbe\061\uffbe\001\002\000\030\004\066\005\056" +
    "\006\045\007\064\010\071\011\102\022\074\033\072\046" +
    "\050\053\054\060\062\001\002\000\040\031\117\032\115" +
    "\033\107\035\121\036\111\037\112\040\124\041\113\042" +
    "\122\043\116\044\114\045\120\047\110\050\123\061\221" +
    "\001\002\000\004\054\222\001\002\000\042\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\017\uffcc\022\uffcc" +
    "\024\uffcc\030\uffcc\033\uffcc\046\uffcc\052\uffcc\053\uffcc\060" +
    "\uffcc\063\uffcc\001\002\000\004\062\uffe4\001\002\000\006" +
    "\055\230\061\231\001\002\000\006\055\uffe1\061\uffe1\001" +
    "\002\000\004\011\227\001\002\000\006\055\uffe0\061\uffe0" +
    "\001\002\000\016\011\037\013\031\014\033\016\035\020" +
    "\032\026\030\001\002\000\004\062\uffe3\001\002\000\006" +
    "\055\uffe2\061\uffe2\001\002\000\004\060\042\001\002\000" +
    "\004\062\235\001\002\000\052\004\066\005\056\006\045" +
    "\007\064\010\071\011\055\013\031\014\033\016\035\017" +
    "\077\020\032\022\074\024\237\026\030\030\063\033\072" +
    "\046\050\052\046\053\054\060\062\001\002\000\004\024" +
    "\243\001\002\000\030\004\066\005\056\006\045\007\064" +
    "\010\071\011\102\022\074\033\072\046\050\053\054\060" +
    "\062\001\002\000\040\031\117\032\115\033\107\035\121" +
    "\036\111\037\112\040\124\041\113\042\122\043\116\044" +
    "\114\045\120\047\110\050\123\054\241\001\002\000\004" +
    "\063\242\001\002\000\006\023\uffe7\063\uffe7\001\002\000" +
    "\030\004\066\005\056\006\045\007\064\010\071\011\102" +
    "\022\074\033\072\046\050\053\054\060\062\001\002\000" +
    "\040\031\117\032\115\033\107\035\121\036\111\037\112" +
    "\040\124\041\113\042\122\043\116\044\114\045\120\047" +
    "\110\050\123\054\245\001\002\000\004\063\246\001\002" +
    "\000\006\023\uffe8\063\uffe8\001\002\000\004\011\250\001" +
    "\002\000\010\051\252\054\251\060\042\001\002\000\006" +
    "\023\uffeb\063\uffeb\001\002\000\030\004\066\005\056\006" +
    "\045\007\064\010\071\011\102\022\074\033\072\046\050" +
    "\053\054\060\062\001\002\000\040\031\117\032\115\033" +
    "\107\035\121\036\111\037\112\040\124\041\113\042\122" +
    "\043\116\044\114\045\120\047\110\050\123\054\254\001" +
    "\002\000\006\023\uffec\063\uffec\001\002\000\006\023\uffee" +
    "\063\uffee\001\002\000\006\023\025\063\260\001\002\000" +
    "\010\002\ufff1\012\ufff1\023\ufff1\001\002\000\010\002\ufff2" +
    "\012\ufff2\023\ufff2\001\002\000\006\002\ufffd\012\007\001" +
    "\002\000\006\002\ufffc\012\007\001\002\000\004\002\001" +
    "\001\002\000\004\011\265\001\002\000\004\062\266\001" +
    "\002\000\004\023\270\001\002\000\004\023\270\001\002" +
    "\000\022\011\037\013\031\014\033\016\035\020\032\025" +
    "\277\026\030\027\040\001\002\000\004\063\314\001\002" +
    "\000\006\023\025\063\ufff9\001\002\000\004\023\274\001" +
    "\002\000\022\011\037\013\031\014\033\016\035\020\032" +
    "\025\277\026\030\027\040\001\002\000\006\023\025\063" +
    "\ufff7\001\002\000\006\023\025\063\ufff6\001\002\000\004" +
    "\027\300\001\002\000\004\021\301\001\002\000\004\060" +
    "\302\001\002\000\004\026\303\001\002\000\004\056\304" +
    "\001\002\000\004\057\305\001\002\000\004\011\306\001" +
    "\002\000\004\061\307\001\002\000\004\062\310\001\002" +
    "\000\050\004\066\005\056\006\045\007\064\010\071\011" +
    "\055\013\031\014\033\016\035\017\077\020\032\022\074" +
    "\026\030\030\063\033\072\046\050\052\046\053\054\060" +
    "\062\001\002\000\004\063\312\001\002\000\006\023\ufff5" +
    "\063\ufff5\001\002\000\006\023\025\063\ufff8\001\002\000" +
    "\006\002\ufffa\012\ufffa\001\002\000\004\063\316\001\002" +
    "\000\006\002\ufffb\012\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\014\002\004\003\007\004\010\007\005\010" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\260\010\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\012\010\011\001\001\000\002\001\001" +
    "\000\004\010\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\016\012\020\013\021\014\022\001\001" +
    "\000\010\012\254\013\255\014\022\001\001\000\006\032" +
    "\246\033\035\001\001\000\002\001\001\000\004\014\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\033\033\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\042\001\001\000\012\016\223\017\224\032\225\033\035" +
    "\001\001\000\002\001\001\000\034\020\060\021\072\022" +
    "\066\023\074\024\046\025\056\026\050\027\052\030\075" +
    "\031\067\032\051\033\035\034\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\173\001\001" +
    "\000\030\022\171\023\172\024\046\025\056\026\050\027" +
    "\052\030\075\031\067\032\051\033\035\034\064\001\001" +
    "\000\002\001\001\000\020\024\161\025\056\026\050\027" +
    "\052\030\075\031\067\034\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\105\035\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\147\001\001\000\004\034\146\001\001\000\004" +
    "\034\145\001\001\000\004\034\144\001\001\000\004\034" +
    "\143\001\001\000\004\034\142\001\001\000\004\034\141" +
    "\001\001\000\004\034\140\001\001\000\002\001\001\000" +
    "\004\034\130\001\001\000\004\034\127\001\001\000\004" +
    "\034\126\001\001\000\004\034\125\001\001\000\004\034" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\105\035\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\020\153\021\072\022" +
    "\066\023\074\024\046\025\056\026\050\027\052\030\075" +
    "\031\067\032\051\033\035\034\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\020\157" +
    "\021\072\022\066\023\074\024\046\025\056\026\050\027" +
    "\052\030\075\031\067\032\051\033\035\034\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\024\161\025\056" +
    "\026\050\027\052\030\075\031\067\034\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\020\201\021" +
    "\072\022\066\023\074\024\046\025\056\026\050\027\052" +
    "\030\075\031\067\032\051\033\035\034\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\231\032\225\033\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\233\001\001\000\002" +
    "\001\001\000\034\020\235\021\072\022\066\023\074\024" +
    "\046\025\056\026\050\027\052\030\075\031\067\032\051" +
    "\033\035\034\064\001\001\000\002\001\001\000\004\034" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\233\001\001\000\002\001\001\000\004\034\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\261\010\011\001\001\000\004\010\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\270\006\271\011\266\012\020\013\272" +
    "\014\022\001\001\000\014\005\314\006\271\012\254\013" +
    "\272\014\022\001\001\000\006\032\246\033\035\001\001" +
    "\000\002\001\001\000\006\013\312\014\022\001\001\000" +
    "\006\006\274\014\025\001\001\000\006\032\033\033\035" +
    "\001\001\000\006\013\275\014\022\001\001\000\004\014" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\020\310\021\072\022\066\023\074\024\046\025" +
    "\056\026\050\027\052\030\075\031\067\032\051\033\035" +
    "\034\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LR1Analyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LR1Analyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LR1Analyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

            nameTableBuilder =  new NameTableBuilder();
            semanticAnalyzer = new SemanticAnalyzer(nameTableBuilder);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


    private NameTableBuilder nameTableBuilder;
    private SemanticAnalyzer semanticAnalyzer;


    protected NameTableBuilder getNameTableBuilder(){
        return this.nameTableBuilder;
    }

    protected SemanticAnalyzer getSemanticAnalyzer(){
        return this.semanticAnalyzer;
    }

    public Entry getNameTable(){
        return this.nameTableBuilder.getNameTable();
    }


    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        throw new Exception("Syntax error near symbol " + cur_token);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$LR1Analyzer$actions {
  private final LR1Analyzer parser;

  /** Constructor */
  CUP$LR1Analyzer$actions(LR1Analyzer parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$LR1Analyzer$do_action(
    int                        CUP$LR1Analyzer$act_num,
    java_cup.runtime.lr_parser CUP$LR1Analyzer$parser,
    java.util.Stack            CUP$LR1Analyzer$stack,
    int                        CUP$LR1Analyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LR1Analyzer$result;

      /* select the action based on the action number */
      switch (CUP$LR1Analyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // actual_params_list ::= expression 
            {
              List<Object> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = new LinkedList<Object>();
                                        RESULT.add(param);
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("actual_params_list",27, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // actual_params_list ::= actual_params_list COMMA expression 
            {
              List<Object> RESULT =null;
		int actualParamsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int actualParamsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		List<Object> actualParamsList = (List<Object>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        actualParamsList.add(param);
                                        RESULT = actualParamsList;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("actual_params_list",27, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= MINUS expression 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = value;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= NEW_KEYWORD IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		
                                        RESULT = value;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = value;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= CHAR_TYPE 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = value;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= STRING_TYPE 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = value;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= BOOLEAN_TYPE 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = value;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= FLOAT_TYPE 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = value;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= INTEGER_TYPE 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression OR expression 
            {
              Object RESULT =null;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression AND expression 
            {
              Object RESULT =null;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression NOT_EQUAL expression 
            {
              Object RESULT =null;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= expression EQUAL expression 
            {
              Object RESULT =null;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression GREATER_EQUAL expression 
            {
              Object RESULT =null;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression GREATER expression 
            {
              Object RESULT =null;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression LOWER_EQUAL expression 
            {
              Object RESULT =null;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression LOWER expression 
            {
              Object RESULT =null;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression DIVIDE expression 
            {
              Object RESULT =null;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression TIMES expression 
            {
              Object RESULT =null;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= LEFT_PARENTHESIS expression RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= EXCLAMATION expression 
            {
              Object RESULT =null;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= SYSTEM_IN_READ LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= expression INSTANCEOF expression 
            {
              Object RESULT =null;
		
                                        RESULT = null;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= IDENTIFIER LEFT_PARENTHESIS actual_params_list RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		int actualParamsleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int actualParamsright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Object> actualParams = (List<Object>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= expression STOP IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		int expressionValueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).left;
		int expressionValueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).right;
		Object expressionValue = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression STOP IDENTIFIER LEFT_PARENTHESIS actual_params_list RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		int expressionValueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)).left;
		int expressionValueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)).right;
		Object expressionValue = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).value;
		int actualParamsleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int actualParamsright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Object> actualParams = (List<Object>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // reference_type ::= IDENTIFIER 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = name;
                                    
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("reference_type",25, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= reference_type 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		 RESULT = value; 
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= STRING_KEYWORD 
            {
              String RESULT =null;
		 RESULT = "String"; 
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= INT_KEYWORD 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= FLOAT_KEYWORD 
            {
              String RESULT =null;
		 RESULT = "float"; 
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= CHAR_KEYWORD 
            {
              String RESULT =null;
		 RESULT = "char"; 
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= BOOLEAN_KEYWORD 
            {
              String RESULT =null;
		 RESULT = "boolean"; 
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // output_statement ::= SYSTEM_OUT_PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("output_statement",23, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // method_call_statement ::= expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_call_statement",22, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // while_statement ::= WHILE_KEYWORD LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int innerBlockleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int innerBlockright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry innerBlock = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareWhileStatement(innerBlock);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("while_statement",21, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_statement ::= IF_KEYWORD LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS ELSE_KEYWORD LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int thenBlockleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)).left;
		int thenBlockright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)).right;
		Entry thenBlock = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)).value;
		int elseBlockleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int elseBlockright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry elseBlock = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareIfStatement(thenBlock, elseBlock);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("if_statement",20, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-10)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // if_statement ::= IF_KEYWORD LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int thenBlockleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int thenBlockright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry thenBlock = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareIfStatement(thenBlock);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("if_statement",20, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignment_statement ::= IDENTIFIER ASSIGN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("assignment_statement",19, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= output_statement 
            {
              Entry RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= method_call_statement 
            {
              Entry RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= while_statement 
            {
              Entry RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry statement = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = statement;
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= if_statement 
            {
              Entry RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry statement = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = statement;
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= assignment_statement 
            {
              Entry RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statements ::= statement 
            {
              List<Entry> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry statement = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = new LinkedList<Entry>();
                                        if (statement != null){
                                            RESULT.add(statement);
                                        }
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statements",17, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statements ::= statements statement 
            {
              List<Entry> RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> statements = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry statement = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        if (statement != null){
                                            statements.add(statement);
                                        }
                                        RESULT = statements;
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statements",17, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable_declaration ::= type IDENTIFIER ASSIGN expression SEMICOLON 
            {
              Entry RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareVariable(name, type, value);
                                    
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("variable_declaration",16, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable_declaration ::= type IDENTIFIER SEMICOLON 
            {
              Entry RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareVariable(name, type);
                                    
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("variable_declaration",16, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variables_declaration ::= variable_declaration 
            {
              List<Entry> RESULT =null;
		int variableEntryleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int variableEntryright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry variableEntry = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(variableEntry);
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("variables_declaration",15, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variables_declaration ::= variables_declaration variable_declaration 
            {
              List<Entry> RESULT =null;
		int variablesEntriesListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int variablesEntriesListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> variablesEntriesList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int variableEntryleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int variableEntryright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry variableEntry = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        variablesEntriesList.add(variableEntry);
                                        RESULT = variablesEntriesList;
                                    
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("variables_declaration",15, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // block ::= statements 
            {
              Entry RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		List<Entry> statements = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                       RESULT = parser.getNameTableBuilder().declareBlock(null, statements);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("block",14, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // block ::= variables_declaration statements 
            {
              Entry RESULT =null;
		int variablesEntriesListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int variablesEntriesListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> variablesEntriesList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		List<Entry> statements = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                       RESULT = parser.getNameTableBuilder().declareBlock(variablesEntriesList, statements);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("block",14, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // block ::= variables_declaration 
            {
              Entry RESULT =null;
		int variablesEntriesListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int variablesEntriesListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		List<Entry> variablesEntriesList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                       RESULT = parser.getNameTableBuilder().declareBlock(variablesEntriesList);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("block",14, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // param_declaration ::= type IDENTIFIER 
            {
              Entry RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                           RESULT = parser.getNameTableBuilder().declareMethodParameter(name, type);
                                     
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("param_declaration",13, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // params_list_declaration ::= param_declaration 
            {
              List<Entry> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry param = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(param);
                                    
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("params_list_declaration",12, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params_list_declaration ::= params_list_declaration COMMA param_declaration 
            {
              List<Entry> RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		List<Entry> paramsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry param = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        paramsList.add(param);
                                        RESULT = paramsList;
                                    
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("params_list_declaration",12, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // method_params_declaration ::= LEFT_PARENTHESIS params_list_declaration RIGHT_PARENTHESIS 
            {
              List<Entry> RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> paramsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = paramsList;
                                    
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_params_declaration",11, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // method_params_declaration ::= LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              List<Entry> RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_params_declaration",11, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // method_declaration ::= PUBLIC_KEYWORD VOID_KEYWORD IDENTIFIER method_params_declaration LEFT_FIG_PARENTHESIS RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		List<Entry> paramsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareMethod(name, "void", paramsList);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_declaration",10, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // method_declaration ::= PUBLIC_KEYWORD VOID_KEYWORD IDENTIFIER method_params_declaration LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).right;
		List<Entry> paramsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).value;
		int innerBlockleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int innerBlockright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry innerBlock = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareMethod(name, "void", paramsList, innerBlock);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_declaration",10, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // method_declaration ::= PUBLIC_KEYWORD type IDENTIFIER method_params_declaration LEFT_FIG_PARENTHESIS RETURN_KEYWORD expression SEMICOLON RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-7)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-7)).right;
		String returnType = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)).right;
		List<Entry> paramsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareMethod(name, returnType, paramsList);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_declaration",10, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-8)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // method_declaration ::= PUBLIC_KEYWORD type IDENTIFIER method_params_declaration LEFT_FIG_PARENTHESIS block RETURN_KEYWORD expression SEMICOLON RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-8)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-8)).right;
		String returnType = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-7)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)).right;
		List<Entry> paramsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)).value;
		int innerBlockleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).left;
		int innerBlockright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).right;
		Entry innerBlock = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareMethod(name, returnType, paramsList, innerBlock);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_declaration",10, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-9)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // methods_declaration ::= method_declaration 
            {
              List<Entry> RESULT =null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry method = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(method);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("methods_declaration",9, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // methods_declaration ::= methods_declaration method_declaration 
            {
              List<Entry> RESULT =null;
		int methodsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int methodsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> methodsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int methodleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry method = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        methodsList.add(method);
                                        RESULT = methodsList;
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("methods_declaration",9, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // field_declaration ::= PUBLIC_KEYWORD type IDENTIFIER SEMICOLON 
            {
              Entry RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareField(name, type);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("field_declaration",8, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // field_declaration ::= PUBLIC_KEYWORD type IDENTIFIER ASSIGN expression SEMICOLON 
            {
              Entry RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareField(name, type, value);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("field_declaration",8, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fields_declaration ::= field_declaration 
            {
              List<Entry> RESULT =null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry field = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(field);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("fields_declaration",7, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fields_declaration ::= fields_declaration field_declaration 
            {
              List<Entry> RESULT =null;
		int fieldsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int fieldsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> fieldsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry field = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        fieldsList.add(field);
                                        RESULT = fieldsList;
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("fields_declaration",7, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // class_declaration ::= CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareClass(name, null, null);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("class_declaration",6, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // class_declaration ::= CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS methods_declaration RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).value;
		int methodsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int methodsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> methodsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareClass(name, null, methodsList);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("class_declaration",6, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // class_declaration ::= CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS fields_declaration RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).value;
		int fieldsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int fieldsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> fieldsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareClass(name, fieldsList, null);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("class_declaration",6, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_declaration ::= CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS fields_declaration methods_declaration RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).value;
		int fieldsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int fieldsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		List<Entry> fieldsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		int methodsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int methodsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> methodsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareClass(name, fieldsList, methodsList);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("class_declaration",6, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // classes_declaration ::= class_declaration 
            {
              List<Entry> RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry classDeclaration = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(classDeclaration);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("classes_declaration",5, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // classes_declaration ::= classes_declaration class_declaration 
            {
              List<Entry> RESULT =null;
		int classesListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int classesListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> classesList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry classDeclaration = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        classesList.add(classDeclaration);
                                        RESULT = classesList;
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("classes_declaration",5, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // main_method_declaration ::= PUBLIC_KEYWORD STATIC_KEYWORD VOID_KEYWORD MAIN_KEYWORD LEFT_PARENTHESIS STRING_KEYWORD LEFT_SQUARE_PARENTHESIS RIGHT_SQUARE_PARENTHESIS IDENTIFIER RIGHT_PARENTHESIS LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int innerBlockleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int innerBlockright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry innerBlock = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareMainMethod(innerBlock);
                                    
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_method_declaration",4, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-12)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // main_class_methods_declaration ::= methods_declaration main_method_declaration methods_declaration 
            {
              List<Entry> RESULT =null;
		int methodsListBeforeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int methodsListBeforeright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		List<Entry> methodsListBefore = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		int mainMethodleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int mainMethodright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry mainMethod = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int methodsListAfterleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int methodsListAfterright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		List<Entry> methodsListAfter = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = methodsListBefore;
                                        RESULT.add(mainMethod);
                                        RESULT.addAll(methodsListAfter);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class_methods_declaration",3, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main_class_methods_declaration ::= methods_declaration main_method_declaration 
            {
              List<Entry> RESULT =null;
		int methodsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int methodsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> methodsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int mainMethodleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int mainMethodright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry mainMethod = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = methodsList;
                                        RESULT.add(mainMethod);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class_methods_declaration",3, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // main_class_methods_declaration ::= main_method_declaration methods_declaration 
            {
              List<Entry> RESULT =null;
		int mainMethodleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int mainMethodright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry mainMethod = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int methodsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int methodsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		List<Entry> methodsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = methodsList;
                                        RESULT.add(mainMethod);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class_methods_declaration",3, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // main_class_methods_declaration ::= main_method_declaration 
            {
              List<Entry> RESULT =null;
		int mainMethodleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int mainMethodright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry mainMethod = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(mainMethod);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class_methods_declaration",3, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main_class ::= PUBLIC_KEYWORD CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS main_class_methods_declaration RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).value;
		int methodsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int methodsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> methodsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareMainClass(name, null, methodsList);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class",2, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main_class ::= PUBLIC_KEYWORD CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS fields_declaration main_class_methods_declaration RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).value;
		int fieldsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int fieldsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		List<Entry> fieldsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		int methodsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int methodsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> methodsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareMainClass(name, fieldsList, methodsList);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class",2, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // compilation_unit ::= classes_declaration main_class classes_declaration 
            {
              Object RESULT =null;
		int classesListBeforeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int classesListBeforeright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		List<Entry> classesListBefore = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		int mainClassleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int mainClassright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry mainClass = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int classesListAfterleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int classesListAfterright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		List<Entry> classesListAfter = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        List<Entry> classes = classesListBefore;
                                        classes.add(mainClass);
                                        classes.addAll(classesListAfter);
                                        parser.getNameTableBuilder().declareProgram(classes);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("compilation_unit",1, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // compilation_unit ::= classes_declaration main_class 
            {
              Object RESULT =null;
		int classesleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int classesright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> classes = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int mainClassleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int mainClassright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry mainClass = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        classes.add(mainClass);
                                        parser.getNameTableBuilder().declareProgram(classes);

                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("compilation_unit",1, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // compilation_unit ::= main_class classes_declaration 
            {
              Object RESULT =null;
		int mainClassleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int mainClassright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry mainClass = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int classesleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int classesright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		List<Entry> classes = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        classes.add(mainClass);
                                        parser.getNameTableBuilder().declareProgram(classes);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("compilation_unit",1, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // compilation_unit ::= main_class 
            {
              Object RESULT =null;
		int mainClassleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int mainClassright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry mainClass = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        List<Entry> classes = new LinkedList<Entry>();
                                        classes.add(mainClass);
                                        parser.getNameTableBuilder().declareProgram(classes);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("compilation_unit",1, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= compilation_unit 
            {
              Object RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		RESULT = start_val;
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LR1Analyzer$parser.done_parsing();
          return CUP$LR1Analyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

