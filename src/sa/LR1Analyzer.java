//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 01 19:28:36 EEST 2012
//----------------------------------------------------

package sa;

import java_cup.runtime.Symbol;
import nametable.Entry;
import nametable.NameTableBuilder;

import java.util.LinkedList;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Sun Apr 01 19:28:36 EEST 2012
 */
public class LR1Analyzer extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public LR1Analyzer() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public LR1Analyzer(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public LR1Analyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\133\000\002\002\004\000\002\002\003\000\002\003" +
                    "\003\000\002\003\004\000\002\003\004\000\002\003\005" +
                    "\000\002\004\011\000\002\004\010\000\002\005\003\000" +
                    "\002\005\004\000\002\005\004\000\002\005\005\000\002" +
                    "\006\017\000\002\007\004\000\002\007\003\000\002\010" +
                    "\010\000\002\010\007\000\002\010\007\000\002\010\006" +
                    "\000\002\011\004\000\002\011\003\000\002\012\006\000" +
                    "\002\012\010\000\002\013\004\000\002\013\003\000\002" +
                    "\014\011\000\002\014\012\000\002\015\004\000\002\015" +
                    "\005\000\002\016\005\000\002\016\003\000\002\017\004" +
                    "\000\002\020\003\000\002\020\004\000\002\020\003\000" +
                    "\002\021\004\000\002\021\003\000\002\022\005\000\002" +
                    "\022\007\000\002\023\004\000\002\023\003\000\002\024" +
                    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
                    "\000\002\024\003\000\002\025\006\000\002\026\011\000" +
                    "\002\026\015\000\002\027\011\000\002\030\011\000\002" +
                    "\031\007\000\002\032\003\000\002\032\003\000\002\032" +
                    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
                    "\000\002\032\003\000\002\033\003\000\002\034\004\000" +
                    "\002\034\005\000\002\035\005\000\002\035\005\000\002" +
                    "\035\004\000\002\035\005\000\002\035\005\000\002\035" +
                    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
                    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
                    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
                    "\035\005\000\002\035\003\000\002\035\003\000\002\035" +
                    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
                    "\000\002\035\006\000\002\035\003\000\002\035\004\000" +
                    "\002\036\005\000\002\036\006\000\002\037\005\000\002" +
                    "\037\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\305\000\006\012\007\023\004\001\002\000\004\012" +
                    "\255\001\002\000\004\002\254\001\002\000\006\012\007" +
                    "\023\004\001\002\000\004\011\015\001\002\000\004\002" +
                    "\000\001\002\000\006\002\uffff\012\007\001\002\000\010" +
                    "\002\ufff3\012\ufff3\023\ufff3\001\002\000\006\002\ufffe\012" +
                    "\007\001\002\000\010\002\ufff4\012\ufff4\023\ufff4\001\002" +
                    "\000\004\063\016\001\002\000\006\023\020\064\024\001" +
                    "\002\000\006\023\020\064\250\001\002\000\020\011\037" +
                    "\013\031\014\033\016\035\020\032\026\030\027\040\001" +
                    "\002\000\006\023\uffed\064\uffed\001\002\000\006\023\025" +
                    "\064\027\001\002\000\006\023\uffe9\064\uffe9\001\002\000" +
                    "\010\002\uffef\012\uffef\023\uffef\001\002\000\020\011\037" +
                    "\013\031\014\033\016\035\020\032\026\030\027\040\001" +
                    "\002\000\006\023\uffea\064\uffea\001\002\000\010\002\ufff0" +
                    "\012\ufff0\023\ufff0\001\002\000\004\011\uffc9\001\002\000" +
                    "\004\011\uffcd\001\002\000\004\011\uffca\001\002\000\004" +
                    "\011\uffcc\001\002\000\004\011\041\001\002\000\004\011" +
                    "\uffcb\001\002\000\004\011\uffc7\001\002\000\004\011\uffc6" +
                    "\001\002\000\004\011\uffc8\001\002\000\004\061\042\001" +
                    "\002\000\022\011\037\013\031\014\033\016\035\020\032" +
                    "\026\030\027\040\062\230\001\002\000\004\063\044\001" +
                    "\002\000\030\011\052\013\031\014\033\016\035\017\064" +
                    "\020\032\024\063\026\030\027\040\030\055\052\045\001" +
                    "\002\000\004\061\224\001\002\000\032\011\uffd9\013\uffd9" +
                    "\014\uffd9\016\uffd9\017\uffd9\020\uffd9\024\uffd9\026\uffd9\027" +
                    "\uffd9\030\uffd9\052\uffd9\064\uffd9\001\002\000\032\011\uffd7" +
                    "\013\uffd7\014\uffd7\016\uffd7\017\uffd7\020\uffd7\024\uffd7\026" +
                    "\uffd7\027\uffd7\030\uffd7\052\uffd7\064\uffd7\001\002\000\004" +
                    "\011\217\001\002\000\032\011\uffd6\013\uffd6\014\uffd6\016" +
                    "\uffd6\017\uffd6\020\uffd6\024\uffd6\026\uffd6\027\uffd6\030\uffd6" +
                    "\052\uffd6\064\uffd6\001\002\000\006\011\uffc6\051\214\001" +
                    "\002\000\032\011\uffd8\013\uffd8\014\uffd8\016\uffd8\017\uffd8" +
                    "\020\uffd8\024\uffd8\026\uffd8\027\uffd8\030\uffd8\052\uffd8\064" +
                    "\uffd8\001\002\000\004\024\063\001\002\000\004\061\204" +
                    "\001\002\000\032\011\uffdd\013\uffdd\014\uffdd\016\uffdd\017" +
                    "\uffdd\020\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd\052\uffdd" +
                    "\064\uffdd\001\002\000\032\011\uffd4\013\uffd4\014\uffd4\016" +
                    "\uffd4\017\uffd4\020\uffd4\024\uffd4\026\uffd4\027\uffd4\030\uffd4" +
                    "\052\uffd4\064\uffd4\001\002\000\032\011\052\013\031\014" +
                    "\033\016\035\017\064\020\032\024\uffe1\026\030\027\040" +
                    "\030\055\052\045\064\uffe1\001\002\000\032\011\052\013" +
                    "\031\014\033\016\035\017\064\020\032\024\uffdf\026\030" +
                    "\027\040\030\055\052\045\064\uffdf\001\002\000\004\064" +
                    "\171\001\002\000\032\004\075\005\076\006\101\007\072" +
                    "\010\070\011\100\022\073\033\067\046\077\054\102\055" +
                    "\167\061\071\001\002\000\004\061\066\001\002\000\032" +
                    "\011\uffd5\013\uffd5\014\uffd5\016\uffd5\017\uffd5\020\uffd5\024" +
                    "\uffd5\026\uffd5\027\uffd5\030\uffd5\052\uffd5\064\uffd5\001\002" +
                    "\000\030\004\075\005\076\006\101\007\072\010\070\011" +
                    "\100\022\073\033\067\046\077\054\102\061\071\001\002" +
                    "\000\030\004\075\005\076\006\101\007\072\010\070\011" +
                    "\100\022\073\033\067\046\077\054\102\061\071\001\002" +
                    "\000\044\031\uffb1\032\uffb1\033\uffb1\035\uffb1\036\uffb1\037" +
                    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
                    "\047\uffb1\050\uffb1\055\uffb1\056\uffb1\062\uffb1\001\002\000" +
                    "\030\004\075\005\076\006\101\007\072\010\070\011\100" +
                    "\022\073\033\067\046\077\054\102\061\071\001\002\000" +
                    "\044\031\uffb0\032\uffb0\033\uffb0\035\uffb0\036\uffb0\037\uffb0" +
                    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\047" +
                    "\uffb0\050\uffb0\055\uffb0\056\uffb0\062\uffb0\001\002\000\004" +
                    "\011\160\001\002\000\040\031\114\032\112\033\104\035" +
                    "\116\036\106\037\107\040\121\041\110\042\117\043\113" +
                    "\044\111\045\115\047\105\050\120\062\150\001\002\000" +
                    "\044\031\uffb3\032\uffb3\033\uffb3\035\uffb3\036\uffb3\037\uffb3" +
                    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\047" +
                    "\uffb3\050\uffb3\055\uffb3\056\uffb3\062\uffb3\001\002\000\044" +
                    "\031\uffb2\032\uffb2\033\uffb2\035\uffb2\036\uffb2\037\uffb2\040" +
                    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\047\uffb2" +
                    "\050\uffb2\055\uffb2\056\uffb2\062\uffb2\001\002\000\030\004" +
                    "\075\005\076\006\101\007\072\010\070\011\100\022\073" +
                    "\033\067\046\077\054\102\061\071\001\002\000\044\031" +
                    "\uffae\032\uffae\033\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
                    "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\047\uffae\050" +
                    "\uffae\055\uffae\056\uffae\062\uffae\001\002\000\044\031\uffaf" +
                    "\032\uffaf\033\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
                    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\047\uffaf\050\uffaf" +
                    "\055\uffaf\056\uffaf\062\uffaf\001\002\000\044\031\uffac\032" +
                    "\uffac\033\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
                    "\042\uffac\043\uffac\044\uffac\045\uffac\047\uffac\050\uffac\055" +
                    "\uffac\056\uffac\062\uffac\001\002\000\044\031\114\032\uffc1" +
                    "\033\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
                    "\uffc1\043\uffc1\044\uffc1\045\uffc1\047\uffc1\050\uffc1\055\uffc1" +
                    "\056\uffc1\062\uffc1\001\002\000\030\004\075\005\076\006" +
                    "\101\007\072\010\070\011\100\022\073\033\067\046\077" +
                    "\054\102\061\071\001\002\000\030\004\075\005\076\006" +
                    "\101\007\072\010\070\011\100\022\073\033\067\046\077" +
                    "\054\102\061\071\001\002\000\030\004\075\005\076\006" +
                    "\101\007\072\010\070\011\100\022\073\033\067\046\077" +
                    "\054\102\061\071\001\002\000\030\004\075\005\076\006" +
                    "\101\007\072\010\070\011\100\022\073\033\067\046\077" +
                    "\054\102\061\071\001\002\000\030\004\075\005\076\006" +
                    "\101\007\072\010\070\011\100\022\073\033\067\046\077" +
                    "\054\102\061\071\001\002\000\030\004\075\005\076\006" +
                    "\101\007\072\010\070\011\100\022\073\033\067\046\077" +
                    "\054\102\061\071\001\002\000\030\004\075\005\076\006" +
                    "\101\007\072\010\070\011\100\022\073\033\067\046\077" +
                    "\054\102\061\071\001\002\000\030\004\075\005\076\006" +
                    "\101\007\072\010\070\011\100\022\073\033\067\046\077" +
                    "\054\102\061\071\001\002\000\004\011\127\001\002\000" +
                    "\030\004\075\005\076\006\101\007\072\010\070\011\100" +
                    "\022\073\033\067\046\077\054\102\061\071\001\002\000" +
                    "\030\004\075\005\076\006\101\007\072\010\070\011\100" +
                    "\022\073\033\067\046\077\054\102\061\071\001\002\000" +
                    "\030\004\075\005\076\006\101\007\072\010\070\011\100" +
                    "\022\073\033\067\046\077\054\102\061\071\001\002\000" +
                    "\030\004\075\005\076\006\101\007\072\010\070\011\100" +
                    "\022\073\033\067\046\077\054\102\061\071\001\002\000" +
                    "\030\004\075\005\076\006\101\007\072\010\070\011\100" +
                    "\022\073\033\067\046\077\054\102\061\071\001\002\000" +
                    "\044\031\114\032\112\033\104\035\116\036\106\037\uffba" +
                    "\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\047" +
                    "\uffba\050\uffba\055\uffba\056\uffba\062\uffba\001\002\000\044" +
                    "\031\114\032\112\033\104\035\116\036\106\037\107\040" +
                    "\121\041\110\042\117\043\113\044\111\045\115\047\105" +
                    "\050\uffb4\055\uffb4\056\uffb4\062\uffb4\001\002\000\044\031" +
                    "\114\032\112\033\104\035\116\036\106\037\uffb8\040\uffb8" +
                    "\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\047\uffb8\050" +
                    "\uffb8\055\uffb8\056\uffb8\062\uffb8\001\002\000\044\031\114" +
                    "\032\uffbd\033\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
                    "\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\047\uffbd\050\uffbd" +
                    "\055\uffbd\056\uffbd\062\uffbd\001\002\000\044\031\114\032" +
                    "\112\033\104\035\116\036\106\037\107\040\121\041\110" +
                    "\042\117\043\113\044\uffb6\045\uffb6\047\uffb6\050\uffb6\055" +
                    "\uffb6\056\uffb6\062\uffb6\001\002\000\004\061\131\001\002" +
                    "\000\044\031\uffc3\032\uffc3\033\uffc3\035\uffc3\036\uffc3\037" +
                    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
                    "\047\uffc3\050\uffc3\055\uffc3\056\uffc3\062\uffc3\001\002\000" +
                    "\032\004\075\005\076\006\101\007\072\010\070\011\100" +
                    "\022\073\033\067\046\077\054\102\061\071\062\132\001" +
                    "\002\000\044\031\uffaa\032\uffaa\033\uffaa\035\uffaa\036\uffaa" +
                    "\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
                    "\uffaa\047\uffaa\050\uffaa\055\uffaa\056\uffaa\062\uffaa\001\002" +
                    "\000\006\056\135\062\136\001\002\000\042\031\114\032" +
                    "\112\033\104\035\116\036\106\037\107\040\121\041\110" +
                    "\042\117\043\113\044\111\045\115\047\105\050\120\056" +
                    "\uffa7\062\uffa7\001\002\000\030\004\075\005\076\006\101" +
                    "\007\072\010\070\011\100\022\073\033\067\046\077\054" +
                    "\102\061\071\001\002\000\044\031\uffa9\032\uffa9\033\uffa9" +
                    "\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043" +
                    "\uffa9\044\uffa9\045\uffa9\047\uffa9\050\uffa9\055\uffa9\056\uffa9" +
                    "\062\uffa9\001\002\000\042\031\114\032\112\033\104\035" +
                    "\116\036\106\037\107\040\121\041\110\042\117\043\113" +
                    "\044\111\045\115\047\105\050\120\056\uffa8\062\uffa8\001" +
                    "\002\000\044\031\114\032\112\033\104\035\116\036\106" +
                    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
                    "\uffc2\047\uffc2\050\uffc2\055\uffc2\056\uffc2\062\uffc2\001\002" +
                    "\000\044\031\114\032\uffbf\033\uffbf\035\116\036\106\037" +
                    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
                    "\047\uffbf\050\uffbf\055\uffbf\056\uffbf\062\uffbf\001\002\000" +
                    "\044\031\114\032\112\033\104\035\116\036\106\037\107" +
                    "\040\121\041\110\042\117\043\113\044\uffb7\045\uffb7\047" +
                    "\uffb7\050\uffb7\055\uffb7\056\uffb7\062\uffb7\001\002\000\044" +
                    "\031\114\032\112\033\104\035\116\036\106\037\uffb9\040" +
                    "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\047\uffb9" +
                    "\050\uffb9\055\uffb9\056\uffb9\062\uffb9\001\002\000\044\031" +
                    "\114\032\112\033\104\035\116\036\106\037\uffbb\040\uffbb" +
                    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\047\uffbb\050" +
                    "\uffbb\055\uffbb\056\uffbb\062\uffbb\001\002\000\044\031\114" +
                    "\032\uffbc\033\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
                    "\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\047\uffbc\050\uffbc" +
                    "\055\uffbc\056\uffbc\062\uffbc\001\002\000\044\031\114\032" +
                    "\112\033\104\035\116\036\106\037\107\040\121\041\110" +
                    "\042\117\043\113\044\111\045\115\047\uffb5\050\uffb5\055" +
                    "\uffb5\056\uffb5\062\uffb5\001\002\000\044\031\114\032\uffbe" +
                    "\033\uffbe\035\116\036\106\037\uffbe\040\uffbe\041\uffbe\042" +
                    "\uffbe\043\uffbe\044\uffbe\045\uffbe\047\uffbe\050\uffbe\055\uffbe" +
                    "\056\uffbe\062\uffbe\001\002\000\004\063\151\001\002\000" +
                    "\026\011\052\013\031\014\033\016\035\017\064\020\032" +
                    "\026\030\027\040\030\055\052\045\001\002\000\004\064" +
                    "\153\001\002\000\034\011\uffd2\013\uffd2\014\uffd2\015\154" +
                    "\016\uffd2\017\uffd2\020\uffd2\024\uffd2\026\uffd2\027\uffd2\030" +
                    "\uffd2\052\uffd2\064\uffd2\001\002\000\004\063\155\001\002" +
                    "\000\026\011\052\013\031\014\033\016\035\017\064\020" +
                    "\032\026\030\027\040\030\055\052\045\001\002\000\004" +
                    "\064\157\001\002\000\032\011\uffd1\013\uffd1\014\uffd1\016" +
                    "\uffd1\017\uffd1\020\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1" +
                    "\052\uffd1\064\uffd1\001\002\000\004\061\161\001\002\000" +
                    "\004\062\162\001\002\000\044\031\uffad\032\uffad\033\uffad" +
                    "\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043" +
                    "\uffad\044\uffad\045\uffad\047\uffad\050\uffad\055\uffad\056\uffad" +
                    "\062\uffad\001\002\000\040\031\114\032\112\033\104\035" +
                    "\116\036\106\037\107\040\121\041\110\042\117\043\113" +
                    "\044\111\045\115\047\105\050\120\062\164\001\002\000" +
                    "\044\031\uffc0\032\uffc0\033\uffc0\035\uffc0\036\uffc0\037\uffc0" +
                    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\047" +
                    "\uffc0\050\uffc0\055\uffc0\056\uffc0\062\uffc0\001\002\000\044" +
                    "\031\114\032\uffab\033\uffab\035\uffab\036\uffab\037\uffab\040" +
                    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\047\uffab" +
                    "\050\uffab\055\uffab\056\uffab\062\uffab\001\002\000\040\031" +
                    "\114\032\112\033\104\035\116\036\106\037\107\040\121" +
                    "\041\110\042\117\043\113\044\111\045\115\047\105\050" +
                    "\120\055\170\001\002\000\004\064\uffc5\001\002\000\004" +
                    "\064\uffc4\001\002\000\006\023\uffe8\064\uffe8\001\002\000" +
                    "\032\011\uffda\013\uffda\014\uffda\016\uffda\017\uffda\020\uffda" +
                    "\024\uffda\026\uffda\027\uffda\030\uffda\052\uffda\064\uffda\001" +
                    "\002\000\004\011\174\001\002\000\004\051\175\001\002" +
                    "\000\004\053\176\001\002\000\004\061\177\001\002\000" +
                    "\004\062\200\001\002\000\004\055\201\001\002\000\032" +
                    "\011\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf\020\uffcf\024" +
                    "\uffcf\026\uffcf\027\uffcf\030\uffcf\052\uffcf\064\uffcf\001\002" +
                    "\000\032\011\uffde\013\uffde\014\uffde\016\uffde\017\uffde\020" +
                    "\uffde\024\uffde\026\uffde\027\uffde\030\uffde\052\uffde\064\uffde" +
                    "\001\002\000\032\011\052\013\031\014\033\016\035\017" +
                    "\064\020\032\024\uffe0\026\030\027\040\030\055\052\045" +
                    "\064\uffe0\001\002\000\030\004\075\005\076\006\101\007" +
                    "\072\010\070\011\100\022\073\033\067\046\077\054\102" +
                    "\061\071\001\002\000\040\031\114\032\112\033\104\035" +
                    "\116\036\106\037\107\040\121\041\110\042\117\043\113" +
                    "\044\111\045\115\047\105\050\120\062\206\001\002\000" +
                    "\004\063\207\001\002\000\026\011\052\013\031\014\033" +
                    "\016\035\017\064\020\032\026\030\027\040\030\055\052" +
                    "\045\001\002\000\004\064\211\001\002\000\032\011\uffd0" +
                    "\013\uffd0\014\uffd0\016\uffd0\017\uffd0\020\uffd0\024\uffd0\026" +
                    "\uffd0\027\uffd0\030\uffd0\052\uffd0\064\uffd0\001\002\000\004" +
                    "\064\213\001\002\000\006\023\uffe7\064\uffe7\001\002\000" +
                    "\030\004\075\005\076\006\101\007\072\010\070\011\100" +
                    "\022\073\033\067\046\077\054\102\061\071\001\002\000" +
                    "\040\031\114\032\112\033\104\035\116\036\106\037\107" +
                    "\040\121\041\110\042\117\043\113\044\111\045\115\047" +
                    "\105\050\120\055\216\001\002\000\032\011\uffd3\013\uffd3" +
                    "\014\uffd3\016\uffd3\017\uffd3\020\uffd3\024\uffd3\026\uffd3\027" +
                    "\uffd3\030\uffd3\052\uffd3\064\uffd3\001\002\000\006\051\221" +
                    "\055\220\001\002\000\032\011\uffdc\013\uffdc\014\uffdc\016" +
                    "\uffdc\017\uffdc\020\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc" +
                    "\052\uffdc\064\uffdc\001\002\000\032\004\075\005\076\006" +
                    "\101\007\072\010\070\011\100\022\073\033\067\046\077" +
                    "\053\176\054\102\061\071\001\002\000\040\031\114\032" +
                    "\112\033\104\035\116\036\106\037\107\040\121\041\110" +
                    "\042\117\043\113\044\111\045\115\047\105\050\120\055" +
                    "\223\001\002\000\032\011\uffdb\013\uffdb\014\uffdb\016\uffdb" +
                    "\017\uffdb\020\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\052" +
                    "\uffdb\064\uffdb\001\002\000\030\004\075\005\076\006\101" +
                    "\007\072\010\070\011\100\022\073\033\067\046\077\054" +
                    "\102\061\071\001\002\000\040\031\114\032\112\033\104" +
                    "\035\116\036\106\037\107\040\121\041\110\042\117\043" +
                    "\113\044\111\045\115\047\105\050\120\062\226\001\002" +
                    "\000\004\055\227\001\002\000\032\011\uffce\013\uffce\014" +
                    "\uffce\016\uffce\017\uffce\020\uffce\024\uffce\026\uffce\027\uffce" +
                    "\030\uffce\052\uffce\064\uffce\001\002\000\004\063\uffe6\001" +
                    "\002\000\006\056\235\062\236\001\002\000\006\056\uffe3" +
                    "\062\uffe3\001\002\000\004\011\234\001\002\000\006\056" +
                    "\uffe2\062\uffe2\001\002\000\020\011\037\013\031\014\033" +
                    "\016\035\020\032\026\030\027\040\001\002\000\004\063" +
                    "\uffe5\001\002\000\006\056\uffe4\062\uffe4\001\002\000\004" +
                    "\011\241\001\002\000\010\051\243\055\242\061\042\001" +
                    "\002\000\006\023\uffec\064\uffec\001\002\000\030\004\075" +
                    "\005\076\006\101\007\072\010\070\011\100\022\073\033" +
                    "\067\046\077\054\102\061\071\001\002\000\040\031\114" +
                    "\032\112\033\104\035\116\036\106\037\107\040\121\041" +
                    "\110\042\117\043\113\044\111\045\115\047\105\050\120" +
                    "\055\245\001\002\000\006\023\uffeb\064\uffeb\001\002\000" +
                    "\006\023\uffee\064\uffee\001\002\000\006\023\025\064\251" +
                    "\001\002\000\010\002\ufff1\012\ufff1\023\ufff1\001\002\000" +
                    "\010\002\ufff2\012\ufff2\023\ufff2\001\002\000\006\002\ufffd" +
                    "\012\007\001\002\000\006\002\ufffc\012\007\001\002\000" +
                    "\004\002\001\001\002\000\004\011\256\001\002\000\004" +
                    "\063\257\001\002\000\004\023\261\001\002\000\004\023" +
                    "\261\001\002\000\022\011\037\013\031\014\033\016\035" +
                    "\020\032\025\270\026\030\027\040\001\002\000\004\064" +
                    "\305\001\002\000\006\023\025\064\ufff9\001\002\000\004" +
                    "\023\265\001\002\000\022\011\037\013\031\014\033\016" +
                    "\035\020\032\025\270\026\030\027\040\001\002\000\006" +
                    "\023\025\064\ufff7\001\002\000\006\023\025\064\ufff6\001" +
                    "\002\000\004\027\271\001\002\000\004\021\272\001\002" +
                    "\000\004\061\273\001\002\000\004\026\274\001\002\000" +
                    "\004\057\275\001\002\000\004\060\276\001\002\000\004" +
                    "\011\277\001\002\000\004\062\300\001\002\000\004\063" +
                    "\301\001\002\000\026\011\052\013\031\014\033\016\035" +
                    "\017\064\020\032\026\030\027\040\030\055\052\045\001" +
                    "\002\000\004\064\303\001\002\000\006\023\ufff5\064\ufff5" +
                    "\001\002\000\006\023\025\064\ufff8\001\002\000\006\002" +
                    "\ufffa\012\ufffa\001\002\000\004\064\307\001\002\000\006" +
                    "\002\ufffb\012\ufffb\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\305\000\014\002\004\003\007\004\010\007\005\010" +
                    "\011\001\001\000\002\001\001\000\002\001\001\000\006" +
                    "\004\251\010\013\001\001\000\002\001\001\000\002\001" +
                    "\001\000\006\007\012\010\011\001\001\000\002\001\001" +
                    "\000\004\010\013\001\001\000\002\001\001\000\002\001" +
                    "\001\000\012\011\016\012\020\013\021\014\022\001\001" +
                    "\000\010\012\245\013\246\014\022\001\001\000\006\032" +
                    "\237\033\035\001\001\000\002\001\001\000\004\014\025" +
                    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
                    "\033\033\035\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
                    "\042\001\001\000\012\016\230\017\231\032\232\033\035" +
                    "\001\001\000\002\001\001\000\034\020\053\021\057\022" +
                    "\055\023\060\024\045\025\052\026\046\027\050\030\064" +
                    "\031\056\032\047\033\035\034\061\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\004\034\211\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\026\022\201\023\202\024\045\025" +
                    "\052\026\046\027\050\030\064\031\056\032\047\033\035" +
                    "\001\001\000\022\024\171\025\052\026\046\027\050\030" +
                    "\064\031\056\032\172\033\035\001\001\000\002\001\001" +
                    "\000\004\035\165\001\001\000\002\001\001\000\002\001" +
                    "\001\000\004\035\073\001\001\000\004\035\164\001\001" +
                    "\000\002\001\001\000\004\035\162\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\004\035\102\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\004\035\146\001\001\000\004\035\145\001\001\000" +
                    "\004\035\144\001\001\000\004\035\143\001\001\000\004" +
                    "\035\142\001\001\000\004\035\141\001\001\000\004\035" +
                    "\140\001\001\000\004\035\137\001\001\000\004\036\127" +
                    "\001\001\000\004\035\125\001\001\000\004\035\124\001" +
                    "\001\000\004\035\123\001\001\000\004\035\122\001\001" +
                    "\000\004\035\121\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\006\035\133\037" +
                    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\004\035\136\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\032\020\151\021\057\022\055\023\060\024\045\025" +
                    "\052\026\046\027\050\030\064\031\056\032\047\033\035" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\032\020\155\021\057\022\055\023\060\024\045" +
                    "\025\052\026\046\027\050\030\064\031\056\032\047\033" +
                    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\022\024\171" +
                    "\025\052\026\046\027\050\030\064\031\056\032\172\033" +
                    "\035\001\001\000\004\035\204\001\001\000\002\001\001" +
                    "\000\002\001\001\000\032\020\207\021\057\022\055\023" +
                    "\060\024\045\025\052\026\046\027\050\030\064\031\056" +
                    "\032\047\033\035\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\004\035\214" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\004\035\221\001\001\000\002" +
                    "\001\001\000\002\001\001\000\004\035\224\001\001\000" +
                    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\010\017\236\032\232\033\035" +
                    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                    "\001\000\004\015\042\001\001\000\002\001\001\000\004" +
                    "\035\243\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\004\014\025\001\001\000\002\001\001" +
                    "\000\002\001\001\000\006\007\252\010\011\001\001\000" +
                    "\004\010\013\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\016\005\261\006\262\011\257\012" +
                    "\020\013\263\014\022\001\001\000\014\005\305\006\262" +
                    "\012\245\013\263\014\022\001\001\000\006\032\237\033" +
                    "\035\001\001\000\002\001\001\000\006\013\303\014\022" +
                    "\001\001\000\006\006\265\014\025\001\001\000\006\032" +
                    "\033\033\035\001\001\000\006\013\266\014\022\001\001" +
                    "\000\004\014\025\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                    "\002\001\001\000\032\020\301\021\057\022\055\023\060" +
                    "\024\045\025\052\026\046\027\050\030\064\031\056\032" +
                    "\047\033\035\001\001\000\002\001\001\000\002\001\001" +
                    "\000\004\014\025\001\001\000\002\001\001\000\002\001" +
                    "\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$LR1Analyzer$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$LR1Analyzer$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$LR1Analyzer$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }


    /**
     * User initialization code.
     */
    public void user_init() throws java.lang.Exception {
        nameTableBuilder = new NameTableBuilder(new LinkedList<Entry>());
    }

    /**
     * Scan to get the next Symbol.
     */
    public java_cup.runtime.Symbol scan()
            throws java.lang.Exception {
        return getScanner().next_token();
    }


    private NameTableBuilder nameTableBuilder;

    public NameTableBuilder getNameTableBuilder() {
        return this.nameTableBuilder;
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        throw new Exception("Syntax error near symbol " + cur_token);
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$LR1Analyzer$actions {
    private final LR1Analyzer parser;

    /**
     * Constructor
     */
    CUP$LR1Analyzer$actions(LR1Analyzer parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$LR1Analyzer$do_action(
            int CUP$LR1Analyzer$act_num,
            java_cup.runtime.lr_parser CUP$LR1Analyzer$parser,
            java.util.Stack CUP$LR1Analyzer$stack,
            int CUP$LR1Analyzer$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$LR1Analyzer$result;

        /* select the action based on the action number */
        switch (CUP$LR1Analyzer$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // actual_params_list ::= expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("actual_params_list", 29,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // actual_params_list ::= actual_params_list COMMA expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("actual_params_list", 29,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // method_call ::= IDENTIFIER LEFT_PARENTHESIS actual_params_list RIGHT_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_call", 28,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 3)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // method_call ::= IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_call", 28, ((java_cup.runtime
                        .Symbol) CUP$LR1Analyzer$stack.elementAt(
                        CUP$LR1Analyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // expression ::= MINUS expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 1)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // expression ::= BREAK
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // expression ::= NEW_KEYWORD IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 3)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // expression ::= IDENTIFIER
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // expression ::= CHAR_TYPE
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // expression ::= STRING_TYPE
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // expression ::= BOOLEAN_TYPE
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // expression ::= FLOAT_TYPE
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // expression ::= INTEGER_TYPE
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // expression ::= expression OR expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // expression ::= expression AND expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // expression ::= expression NOT_EQUAL expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // expression ::= expression EQUAL expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // expression ::= expression GREATER_EQUAL expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // expression ::= expression GREATER expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // expression ::= expression LOWER_EQUAL expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // expression ::= expression LOWER expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // expression ::= expression DIVIDE expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // expression ::= expression TIMES expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // expression ::= expression MINUS expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // expression ::= expression PLUS expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // expression ::= LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // expression ::= EXCLAMATION expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 1)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // expression ::= expression INSTANCEOF expression
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // expression ::= expression STOP method_call
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression", 27,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // return_statement ::= RETURN_KEYWORD expression SEMICOLON
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("return_statement", 26,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // return_statement ::= RETURN_KEYWORD SEMICOLON
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("return_statement", 26,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 1)),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // reference_type ::= IDENTIFIER
            {
                Integer RESULT = null;
                int nameleft = ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).left;
                int nameright = ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).right;
                String name = (String) ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;

                parser.getNameTableBuilder().addReferenceType(name);
                RESULT = SymbolsInfo.IDENTIFIER;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("reference_type", 25,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // type ::= reference_type
            {
                Integer RESULT = null;
                int valueleft = ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).left;
                int valueright = ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).right;
                Integer value = (Integer) ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
                RESULT = value;
                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type", 24,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // type ::= VOID_KEYWORD
            {
                Integer RESULT = null;
                RESULT = SymbolsInfo.VOID_KEYWORD;
                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type", 24,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // type ::= STRING_KEYWORD
            {
                Integer RESULT = null;
                RESULT = SymbolsInfo.STRING_TYPE;
                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type", 24,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // type ::= INT_KEYWORD
            {
                Integer RESULT = null;
                RESULT = SymbolsInfo.INTEGER_TYPE;
                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type", 24,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // type ::= FLOAT_KEYWORD
            {
                Integer RESULT = null;
                RESULT = SymbolsInfo.FLOAT_TYPE;
                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type", 24,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // type ::= CHAR_KEYWORD
            {
                Integer RESULT = null;
                RESULT = SymbolsInfo.CHAR_TYPE;
                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type", 24,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // type ::= BOOLEAN_KEYWORD
            {
                Integer RESULT = null;
                RESULT = SymbolsInfo.BOOLEAN_TYPE;
                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type", 24,
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol)
                                                                                     CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // output_statement ::= SYSTEM_OUT_PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
            // SEMICOLON
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("output_statement", 23,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 4)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // input_statement ::= type IDENTIFIER ASSIGN SYSTEM_IN_READ LEFT_PARENTHESIS RIGHT_PARENTHESIS SEMICOLON
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("input_statement", 22,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 6)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // while_statement ::= WHILE_KEYWORD LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("while_statement", 21,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 6)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // if_statement ::= IF_KEYWORD LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS ELSE_KEYWORD LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("if_statement", 20,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 10)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // if_statement ::= IF_KEYWORD LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("if_statement", 20,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 6)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // assignment_statement ::= IDENTIFIER ASSIGN expression SEMICOLON
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("assignment_statement", 19,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 3)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // statement ::= output_statement
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statement", 18,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // statement ::= input_statement
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statement", 18,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // statement ::= while_statement
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statement", 18,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // statement ::= if_statement
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statement", 18,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // statement ::= assignment_statement
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statement", 18,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // statements ::= statement
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statements", 17,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // statements ::= statements statement
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statements", 17,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 1)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // variable_declaration ::= type IDENTIFIER ASSIGN expression SEMICOLON
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("variable_declaration", 16,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 4)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // variable_declaration ::= type IDENTIFIER SEMICOLON
            {
                Object RESULT = null;
                int typeIdleft = ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(
                        CUP$LR1Analyzer$top - 2)).left;
                int typeIdright = ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(
                        CUP$LR1Analyzer$top - 2)).right;
                Integer typeId = (Integer) ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(
                        CUP$LR1Analyzer$top - 2)).value;
                int nameleft = ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(
                        CUP$LR1Analyzer$top - 1)).left;
                int nameright = ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(
                        CUP$LR1Analyzer$top - 1)).right;
                String name = (String) ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(
                        CUP$LR1Analyzer$top - 1)).value;

                parser.getNameTableBuilder().addVariable(typeId, name);

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("variable_declaration", 16,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // variables_declaration ::= variable_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("variables_declaration", 15,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // variables_declaration ::= variables_declaration variable_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("variables_declaration", 15,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 1)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // block ::= statements
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("block", 14,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // block ::= variables_declaration statements
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("block", 14,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 1)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // block ::= variables_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("block", 14,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // param_declaration ::= type IDENTIFIER
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("param_declaration", 13,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 1)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // params_list_declaration ::= param_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("params_list_declaration", 12,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // params_list_declaration ::= params_list_declaration COMMA param_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("params_list_declaration", 12,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // method_params_declaration ::= LEFT_PARENTHESIS params_list_declaration RIGHT_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_params_declaration", 11,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // method_params_declaration ::= LEFT_PARENTHESIS RIGHT_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_params_declaration", 11,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 1)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // method_declaration ::= PUBLIC_KEYWORD type IDENTIFIER method_params_declaration LEFT_FIG_PARENTHESIS block return_statement RIGHT_FIG_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_declaration", 10,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 7)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // method_declaration ::= PUBLIC_KEYWORD type IDENTIFIER method_params_declaration LEFT_FIG_PARENTHESIS return_statement RIGHT_FIG_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_declaration", 10, ((java_cup
                        .runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(
                        CUP$LR1Analyzer$top - 6)), ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // methods_declaration ::= method_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("methods_declaration", 9,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // methods_declaration ::= methods_declaration method_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("methods_declaration", 9,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 1)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // field_declaration ::= PUBLIC_KEYWORD type IDENTIFIER ASSIGN expression SEMICOLON
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("field_declaration", 8,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 5)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // field_declaration ::= PUBLIC_KEYWORD type IDENTIFIER SEMICOLON
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("field_declaration", 8,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 3)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // fields_declaration ::= field_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("fields_declaration", 7,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // fields_declaration ::= fields_declaration field_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("fields_declaration", 7,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 1)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // class_declaration ::= CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS RIGHT_FIG_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("class_declaration", 6,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 3)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // class_declaration ::= CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS methods_declaration RIGHT_FIG_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("class_declaration", 6,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 4)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // class_declaration ::= CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS fields_declaration RIGHT_FIG_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("class_declaration", 6,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 4)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // class_declaration ::= CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS fields_declaration methods_declaration RIGHT_FIG_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("class_declaration", 6,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 5)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // classes_declaration ::= class_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("classes_declaration", 5,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // classes_declaration ::= classes_declaration class_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("classes_declaration", 5,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 1)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // main_method_declaration ::= PUBLIC_KEYWORD STATIC_KEYWORD VOID_KEYWORD MAIN_KEYWORD LEFT_PARENTHESIS STRING_KEYWORD LEFT_SQUARE_PARENTHESIS RIGHT_SQUARE_PARENTHESIS IDENTIFIER RIGHT_PARENTHESIS LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_method_declaration", 4,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 12)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // main_class_methods_declaration ::= methods_declaration main_method_declaration methods_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class_methods_declaration", 3,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // main_class_methods_declaration ::= methods_declaration main_method_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class_methods_declaration", 3,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 1)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // main_class_methods_declaration ::= main_method_declaration methods_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class_methods_declaration", 3,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 1)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // main_class_methods_declaration ::= main_method_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class_methods_declaration", 3,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // main_class ::= PUBLIC_KEYWORD CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS main_class_methods_declaration RIGHT_FIG_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class", 2,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 5)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // main_class ::= PUBLIC_KEYWORD CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS fields_declaration main_class_methods_declaration RIGHT_FIG_PARENTHESIS
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class", 2,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 6)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // compilation_unit ::= classes_declaration main_class classes_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("compilation_unit", 1,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 2)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // compilation_unit ::= classes_declaration main_class
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("compilation_unit", 1,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 1)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // compilation_unit ::= main_class classes_declaration
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("compilation_unit", 1,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 1)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // compilation_unit ::= main_class
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("compilation_unit", 1,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // goal ::= compilation_unit
            {
                Object RESULT = null;

                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("goal", 0,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            return CUP$LR1Analyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= goal EOF
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(
                        CUP$LR1Analyzer$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(
                        CUP$LR1Analyzer$top - 1)).right;
                Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(
                        CUP$LR1Analyzer$top - 1)).value;
                RESULT = start_val;
                CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("$START", 0,
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .elementAt(
                                                                                             CUP$LR1Analyzer$top - 1)),
                                                                             ((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack
                                                                                     .peek()), RESULT);
            }
            /* ACCEPT */
            CUP$LR1Analyzer$parser.done_parsing();
            return CUP$LR1Analyzer$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}

