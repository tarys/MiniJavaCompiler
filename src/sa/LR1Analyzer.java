
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 15 19:45:37 EEST 2012
//----------------------------------------------------

package sa;

import java_cup.runtime.Symbol;
import nametable.NameTableBuilder;
import nametable.entries.Entry;
import semantic.SemanticAnalyzer;
import java.util.LinkedList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 15 19:45:37 EEST 2012
  */
public class LR1Analyzer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public LR1Analyzer() {super();}

  /** Constructor which sets the default scanner. */
  public LR1Analyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LR1Analyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\004\011\000\002\004\010\000\002\005\003\000" +
    "\002\005\004\000\002\005\004\000\002\005\005\000\002" +
    "\006\017\000\002\007\004\000\002\007\003\000\002\010" +
    "\010\000\002\010\007\000\002\010\007\000\002\010\006" +
    "\000\002\011\004\000\002\011\003\000\002\012\010\000" +
    "\002\012\006\000\002\013\004\000\002\013\003\000\002" +
    "\014\014\000\002\014\013\000\002\014\011\000\002\014" +
    "\010\000\002\015\004\000\002\015\005\000\002\016\005" +
    "\000\002\016\003\000\002\017\004\000\002\020\003\000" +
    "\002\020\004\000\002\020\003\000\002\021\004\000\002" +
    "\021\003\000\002\022\005\000\002\022\007\000\002\023" +
    "\004\000\002\023\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\025\006\000\002\026\011\000\002\026\015\000\002" +
    "\027\011\000\002\030\004\000\002\031\007\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\033\003\000" +
    "\002\034\005\000\002\034\003\000\002\034\005\000\002" +
    "\034\005\000\002\034\004\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\006\000\002\034\003\000" +
    "\002\034\004\000\002\035\005\000\002\035\006\000\002" +
    "\036\005\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\006\012\007\023\004\001\002\000\004\012" +
    "\263\001\002\000\004\002\262\001\002\000\006\012\007" +
    "\023\004\001\002\000\004\011\015\001\002\000\004\002" +
    "\000\001\002\000\006\002\uffff\012\007\001\002\000\010" +
    "\002\ufff3\012\ufff3\023\ufff3\001\002\000\006\002\ufffe\012" +
    "\007\001\002\000\010\002\ufff4\012\ufff4\023\ufff4\001\002" +
    "\000\004\063\016\001\002\000\006\023\020\064\024\001" +
    "\002\000\006\023\020\064\256\001\002\000\020\011\037" +
    "\013\031\014\033\016\035\020\032\026\030\027\040\001" +
    "\002\000\006\023\uffed\064\uffed\001\002\000\006\023\025" +
    "\064\027\001\002\000\006\023\uffe9\064\uffe9\001\002\000" +
    "\010\002\uffef\012\uffef\023\uffef\001\002\000\020\011\037" +
    "\013\031\014\033\016\035\020\032\026\030\027\040\001" +
    "\002\000\006\023\uffea\064\uffea\001\002\000\010\002\ufff0" +
    "\012\ufff0\023\ufff0\001\002\000\004\011\uffc7\001\002\000" +
    "\004\011\uffcb\001\002\000\004\011\uffc8\001\002\000\004" +
    "\011\uffca\001\002\000\004\011\232\001\002\000\004\011" +
    "\uffc9\001\002\000\004\011\uffc6\001\002\000\004\011\uffc5" +
    "\001\002\000\004\011\041\001\002\000\004\061\042\001" +
    "\002\000\020\011\037\013\031\014\033\016\035\020\032" +
    "\026\030\062\222\001\002\000\004\063\044\001\002\000" +
    "\054\004\067\005\056\006\046\007\066\010\073\011\057" +
    "\013\031\014\033\016\035\017\101\020\032\022\076\026" +
    "\030\030\064\033\075\046\051\052\047\053\055\054\072" +
    "\061\063\064\061\001\002\000\044\031\uffc3\032\uffc3\033" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\047\uffc3\050\uffc3\055\uffc3\056" +
    "\uffc3\062\uffc3\001\002\000\044\031\uffae\032\uffae\033\uffae" +
    "\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\047\uffae\050\uffae\055\uffae\056\uffae" +
    "\062\uffae\001\002\000\004\061\216\001\002\000\044\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\017\uffd7" +
    "\022\uffd7\024\uffd7\030\uffd7\033\uffd7\046\uffd7\052\uffd7\053" +
    "\uffd7\054\uffd7\061\uffd7\064\uffd7\001\002\000\032\004\067" +
    "\005\056\006\046\007\066\010\073\011\104\022\076\033" +
    "\075\046\051\053\055\054\072\061\063\001\002\000\044" +
    "\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\017" +
    "\uffd5\022\uffd5\024\uffd5\030\uffd5\033\uffd5\046\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\061\uffd5\064\uffd5\001\002\000\004\011" +
    "\210\001\002\000\044\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\011\uffd4\017\uffd4\022\uffd4\024\uffd4\030\uffd4\033" +
    "\uffd4\046\uffd4\052\uffd4\053\uffd4\054\uffd4\061\uffd4\064\uffd4" +
    "\001\002\000\004\061\206\001\002\000\044\031\uffb1\032" +
    "\uffb1\033\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\045\uffb1\047\uffb1\050\uffb1\055" +
    "\uffb1\056\uffb1\062\uffb1\001\002\000\046\011\uffc5\031\uffad" +
    "\032\uffad\033\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041" +
    "\uffad\042\uffad\043\uffad\044\uffad\045\uffad\047\uffad\050\uffad" +
    "\051\163\055\uffad\061\105\001\002\000\044\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\017\uffd6\022\uffd6" +
    "\024\uffd6\030\uffd6\033\uffd6\046\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\061\uffd6\064\uffd6\001\002\000\006\023\uffe5\064\uffe5" +
    "\001\002\000\004\064\205\001\002\000\032\004\067\005" +
    "\056\006\046\007\066\010\073\011\104\022\076\033\075" +
    "\046\051\053\055\054\072\061\063\001\002\000\004\061" +
    "\175\001\002\000\040\031\121\032\117\033\111\035\123" +
    "\036\113\037\114\040\125\041\115\042\124\043\120\044" +
    "\116\045\122\047\112\050\126\055\174\001\002\000\044" +
    "\031\uffaf\032\uffaf\033\uffaf\035\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\047\uffaf" +
    "\050\uffaf\055\uffaf\056\uffaf\062\uffaf\001\002\000\044\031" +
    "\uffb2\032\uffb2\033\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\047\uffb2\050" +
    "\uffb2\055\uffb2\056\uffb2\062\uffb2\001\002\000\056\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\013\uffdb\014" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb\024\uffdb\026\uffdb" +
    "\030\uffdb\033\uffdb\046\uffdb\052\uffdb\053\uffdb\054\uffdb\061" +
    "\uffdb\064\uffdb\001\002\000\044\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\017\uffd2\022\uffd2\024\uffd2\030" +
    "\uffd2\033\uffd2\046\uffd2\052\uffd2\053\uffd2\054\uffd2\061\uffd2" +
    "\064\uffd2\001\002\000\044\031\uffab\032\uffab\033\uffab\035" +
    "\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\047\uffab\050\uffab\055\uffab\056\uffab\062" +
    "\uffab\001\002\000\044\031\uffb0\032\uffb0\033\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\047\uffb0\050\uffb0\055\uffb0\056\uffb0\062\uffb0" +
    "\001\002\000\056\004\067\005\056\006\046\007\066\010" +
    "\073\011\057\013\031\014\033\016\035\017\101\020\032" +
    "\022\076\024\uffdf\026\030\030\064\033\075\046\051\052" +
    "\047\053\055\054\072\061\063\064\uffdf\001\002\000\032" +
    "\004\067\005\056\006\046\007\066\010\073\011\104\022" +
    "\076\033\075\046\051\053\055\054\072\061\063\001\002" +
    "\000\004\011\166\001\002\000\044\004\067\005\056\006" +
    "\046\007\066\010\073\011\162\017\101\022\076\024\uffdd" +
    "\030\064\033\075\046\051\052\047\053\055\054\072\061" +
    "\063\064\uffdd\001\002\000\044\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\010\uffd3\011\uffd3\017\uffd3\022\uffd3\024\uffd3\030" +
    "\uffd3\033\uffd3\046\uffd3\052\uffd3\053\uffd3\054\uffd3\061\uffd3" +
    "\064\uffd3\001\002\000\004\061\102\001\002\000\032\004" +
    "\067\005\056\006\046\007\066\010\073\011\104\022\076" +
    "\033\075\046\051\053\055\054\072\061\063\001\002\000" +
    "\040\031\121\032\117\033\111\035\123\036\113\037\114" +
    "\040\125\041\115\042\124\043\120\044\116\045\122\047" +
    "\112\050\126\062\151\001\002\000\046\031\uffad\032\uffad" +
    "\033\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\045\uffad\047\uffad\050\uffad\055\uffad" +
    "\056\uffad\061\105\062\uffad\001\002\000\034\004\067\005" +
    "\056\006\046\007\066\010\073\011\104\022\076\033\075" +
    "\046\051\053\055\054\072\061\063\062\106\001\002\000" +
    "\044\031\uffa9\032\uffa9\033\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\047" +
    "\uffa9\050\uffa9\055\uffa9\056\uffa9\062\uffa9\001\002\000\006" +
    "\056\146\062\147\001\002\000\042\031\121\032\117\033" +
    "\111\035\123\036\113\037\114\040\125\041\115\042\124" +
    "\043\120\044\116\045\122\047\112\050\126\056\uffa6\062" +
    "\uffa6\001\002\000\032\004\067\005\056\006\046\007\066" +
    "\010\073\011\104\022\076\033\075\046\051\053\055\054" +
    "\072\061\063\001\002\000\032\004\067\005\056\006\046" +
    "\007\066\010\073\011\104\022\076\033\075\046\051\053" +
    "\055\054\072\061\063\001\002\000\032\004\067\005\056" +
    "\006\046\007\066\010\073\011\104\022\076\033\075\046" +
    "\051\053\055\054\072\061\063\001\002\000\032\004\067" +
    "\005\056\006\046\007\066\010\073\011\104\022\076\033" +
    "\075\046\051\053\055\054\072\061\063\001\002\000\032" +
    "\004\067\005\056\006\046\007\066\010\073\011\104\022" +
    "\076\033\075\046\051\053\055\054\072\061\063\001\002" +
    "\000\032\004\067\005\056\006\046\007\066\010\073\011" +
    "\104\022\076\033\075\046\051\053\055\054\072\061\063" +
    "\001\002\000\032\004\067\005\056\006\046\007\066\010" +
    "\073\011\104\022\076\033\075\046\051\053\055\054\072" +
    "\061\063\001\002\000\032\004\067\005\056\006\046\007" +
    "\066\010\073\011\104\022\076\033\075\046\051\053\055" +
    "\054\072\061\063\001\002\000\004\011\135\001\002\000" +
    "\032\004\067\005\056\006\046\007\066\010\073\011\104" +
    "\022\076\033\075\046\051\053\055\054\072\061\063\001" +
    "\002\000\032\004\067\005\056\006\046\007\066\010\073" +
    "\011\104\022\076\033\075\046\051\053\055\054\072\061" +
    "\063\001\002\000\032\004\067\005\056\006\046\007\066" +
    "\010\073\011\104\022\076\033\075\046\051\053\055\054" +
    "\072\061\063\001\002\000\032\004\067\005\056\006\046" +
    "\007\066\010\073\011\104\022\076\033\075\046\051\053" +
    "\055\054\072\061\063\001\002\000\032\004\067\005\056" +
    "\006\046\007\066\010\073\011\104\022\076\033\075\046" +
    "\051\053\055\054\072\061\063\001\002\000\044\031\121" +
    "\032\117\033\111\035\123\036\113\037\114\040\125\041" +
    "\115\042\124\043\120\044\116\045\122\047\112\050\uffb3" +
    "\055\uffb3\056\uffb3\062\uffb3\001\002\000\044\031\121\032" +
    "\117\033\111\035\123\036\113\037\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\045\uffb9\047\uffb9\050\uffb9\055" +
    "\uffb9\056\uffb9\062\uffb9\001\002\000\044\031\121\032\117" +
    "\033\111\035\123\036\113\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\047\uffb7\050\uffb7\055\uffb7" +
    "\056\uffb7\062\uffb7\001\002\000\044\031\121\032\uffbc\033" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\047\uffbc\050\uffbc\055\uffbc\056" +
    "\uffbc\062\uffbc\001\002\000\044\031\121\032\117\033\111" +
    "\035\123\036\113\037\114\040\125\041\115\042\124\043" +
    "\120\044\uffb5\045\uffb5\047\uffb5\050\uffb5\055\uffb5\056\uffb5" +
    "\062\uffb5\001\002\000\044\031\uffc4\032\uffc4\033\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\047\uffc4\050\uffc4\055\uffc4\056\uffc4\062" +
    "\uffc4\001\002\000\004\061\105\001\002\000\044\031\121" +
    "\032\117\033\111\035\123\036\113\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\047\uffc2\050\uffc2" +
    "\055\uffc2\056\uffc2\062\uffc2\001\002\000\044\031\121\032" +
    "\uffbe\033\uffbe\035\123\036\113\037\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\045\uffbe\047\uffbe\050\uffbe\055" +
    "\uffbe\056\uffbe\062\uffbe\001\002\000\044\031\121\032\117" +
    "\033\111\035\123\036\113\037\114\040\125\041\115\042" +
    "\124\043\120\044\uffb6\045\uffb6\047\uffb6\050\uffb6\055\uffb6" +
    "\056\uffb6\062\uffb6\001\002\000\044\031\121\032\117\033" +
    "\111\035\123\036\113\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\047\uffb8\050\uffb8\055\uffb8\056" +
    "\uffb8\062\uffb8\001\002\000\044\031\121\032\117\033\111" +
    "\035\123\036\113\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\044\uffba\045\uffba\047\uffba\050\uffba\055\uffba\056\uffba" +
    "\062\uffba\001\002\000\044\031\121\032\uffbb\033\uffbb\035" +
    "\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\045\uffbb\047\uffbb\050\uffbb\055\uffbb\056\uffbb\062" +
    "\uffbb\001\002\000\044\031\121\032\117\033\111\035\123" +
    "\036\113\037\114\040\125\041\115\042\124\043\120\044" +
    "\116\045\122\047\uffb4\050\uffb4\055\uffb4\056\uffb4\062\uffb4" +
    "\001\002\000\044\031\121\032\uffbd\033\uffbd\035\123\036" +
    "\113\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\047\uffbd\050\uffbd\055\uffbd\056\uffbd\062\uffbd\001" +
    "\002\000\032\004\067\005\056\006\046\007\066\010\073" +
    "\011\104\022\076\033\075\046\051\053\055\054\072\061" +
    "\063\001\002\000\044\031\uffa8\032\uffa8\033\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\047\uffa8\050\uffa8\055\uffa8\056\uffa8\062\uffa8" +
    "\001\002\000\042\031\121\032\117\033\111\035\123\036" +
    "\113\037\114\040\125\041\115\042\124\043\120\044\116" +
    "\045\122\047\112\050\126\056\uffa7\062\uffa7\001\002\000" +
    "\004\063\152\001\002\000\052\004\067\005\056\006\046" +
    "\007\066\010\073\011\057\013\031\014\033\016\035\017" +
    "\101\020\032\022\076\026\030\030\064\033\075\046\051" +
    "\052\047\053\055\054\072\061\063\001\002\000\004\064" +
    "\154\001\002\000\046\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\015\155\017\uffd0\022\uffd0\024\uffd0\030" +
    "\uffd0\033\uffd0\046\uffd0\052\uffd0\053\uffd0\054\uffd0\061\uffd0" +
    "\064\uffd0\001\002\000\004\063\156\001\002\000\052\004" +
    "\067\005\056\006\046\007\066\010\073\011\057\013\031" +
    "\014\033\016\035\017\101\020\032\022\076\026\030\030" +
    "\064\033\075\046\051\052\047\053\055\054\072\061\063" +
    "\001\002\000\004\064\160\001\002\000\044\004\uffcf\005" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\017\uffcf\022\uffcf" +
    "\024\uffcf\030\uffcf\033\uffcf\046\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\061\uffcf\064\uffcf\001\002\000\044\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\011\uffd8\017\uffd8\022\uffd8\024" +
    "\uffd8\030\uffd8\033\uffd8\046\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\061\uffd8\064\uffd8\001\002\000\044\031\uffad\032\uffad\033" +
    "\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\045\uffad\047\uffad\050\uffad\051\163\055" +
    "\uffad\061\105\001\002\000\032\004\067\005\056\006\046" +
    "\007\066\010\073\011\104\022\076\033\075\046\051\053" +
    "\055\054\072\061\063\001\002\000\040\031\121\032\117" +
    "\033\111\035\123\036\113\037\114\040\125\041\115\042" +
    "\124\043\120\044\116\045\122\047\112\050\126\055\165" +
    "\001\002\000\044\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\017\uffd1\022\uffd1\024\uffd1\030\uffd1\033\uffd1" +
    "\046\uffd1\052\uffd1\053\uffd1\054\uffd1\061\uffd1\064\uffd1\001" +
    "\002\000\004\061\167\001\002\000\004\062\170\001\002" +
    "\000\044\031\uffac\032\uffac\033\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\047\uffac\050\uffac\055\uffac\056\uffac\062\uffac\001\002\000" +
    "\044\031\121\032\uffaa\033\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\047" +
    "\uffaa\050\uffaa\055\uffaa\056\uffaa\062\uffaa\001\002\000\056" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\013" +
    "\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc\024\uffdc" +
    "\026\uffdc\030\uffdc\033\uffdc\046\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\061\uffdc\064\uffdc\001\002\000\044\004\067\005\056" +
    "\006\046\007\066\010\073\011\162\017\101\022\076\024" +
    "\uffde\030\064\033\075\046\051\052\047\053\055\054\072" +
    "\061\063\064\uffde\001\002\000\044\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\017\uffcd\022\uffcd\024\uffcd" +
    "\030\uffcd\033\uffcd\046\uffcd\052\uffcd\053\uffcd\054\uffcd\061" +
    "\uffcd\064\uffcd\001\002\000\032\004\067\005\056\006\046" +
    "\007\066\010\073\011\104\022\076\033\075\046\051\053" +
    "\055\054\072\061\063\001\002\000\040\031\121\032\117" +
    "\033\111\035\123\036\113\037\114\040\125\041\115\042" +
    "\124\043\120\044\116\045\122\047\112\050\126\062\177" +
    "\001\002\000\004\063\200\001\002\000\052\004\067\005" +
    "\056\006\046\007\066\010\073\011\057\013\031\014\033" +
    "\016\035\017\101\020\032\022\076\026\030\030\064\033" +
    "\075\046\051\052\047\053\055\054\072\061\063\001\002" +
    "\000\004\064\202\001\002\000\044\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\017\uffce\022\uffce\024\uffce" +
    "\030\uffce\033\uffce\046\uffce\052\uffce\053\uffce\054\uffce\061" +
    "\uffce\064\uffce\001\002\000\040\031\121\032\117\033\111" +
    "\035\123\036\113\037\114\040\125\041\115\042\124\043" +
    "\120\044\116\045\122\047\112\050\126\062\204\001\002" +
    "\000\044\031\uffbf\032\uffbf\033\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\047\uffbf\050\uffbf\055\uffbf\056\uffbf\062\uffbf\001\002\000" +
    "\006\023\uffe6\064\uffe6\001\002\000\004\062\207\001\002" +
    "\000\044\031\uffc1\032\uffc1\033\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\047\uffc1\050\uffc1\055\uffc1\056\uffc1\062\uffc1\001\002\000" +
    "\006\051\212\055\211\001\002\000\056\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\010\uffda\011\uffda\013\uffda\014\uffda\016" +
    "\uffda\017\uffda\020\uffda\022\uffda\024\uffda\026\uffda\030\uffda" +
    "\033\uffda\046\uffda\052\uffda\053\uffda\054\uffda\061\uffda\064" +
    "\uffda\001\002\000\032\004\067\005\056\006\046\007\066" +
    "\010\073\011\104\022\076\033\075\046\051\053\055\054" +
    "\072\061\063\001\002\000\040\031\121\032\117\033\111" +
    "\035\123\036\113\037\114\040\125\041\115\042\124\043" +
    "\120\044\116\045\122\047\112\050\126\055\214\001\002" +
    "\000\056\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\013\uffd9\014\uffd9\016\uffd9\017\uffd9\020\uffd9\022\uffd9" +
    "\024\uffd9\026\uffd9\030\uffd9\033\uffd9\046\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\061\uffd9\064\uffd9\001\002\000\044\031\121" +
    "\032\uffc0\033\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\047\uffc0\050\uffc0" +
    "\055\uffc0\056\uffc0\062\uffc0\001\002\000\032\004\067\005" +
    "\056\006\046\007\066\010\073\011\104\022\076\033\075" +
    "\046\051\053\055\054\072\061\063\001\002\000\040\031" +
    "\121\032\117\033\111\035\123\036\113\037\114\040\125" +
    "\041\115\042\124\043\120\044\116\045\122\047\112\050" +
    "\126\062\220\001\002\000\004\055\221\001\002\000\044" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\017" +
    "\uffcc\022\uffcc\024\uffcc\030\uffcc\033\uffcc\046\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\061\uffcc\064\uffcc\001\002\000\004\063" +
    "\uffe4\001\002\000\006\056\227\062\230\001\002\000\006" +
    "\056\uffe1\062\uffe1\001\002\000\004\011\226\001\002\000" +
    "\006\056\uffe0\062\uffe0\001\002\000\016\011\037\013\031" +
    "\014\033\016\035\020\032\026\030\001\002\000\004\063" +
    "\uffe3\001\002\000\006\056\uffe2\062\uffe2\001\002\000\004" +
    "\061\042\001\002\000\004\063\234\001\002\000\054\004" +
    "\067\005\056\006\046\007\066\010\073\011\057\013\031" +
    "\014\033\016\035\017\101\020\032\022\076\024\236\026" +
    "\030\030\064\033\075\046\051\052\047\053\055\054\072" +
    "\061\063\001\002\000\004\024\242\001\002\000\032\004" +
    "\067\005\056\006\046\007\066\010\073\011\104\022\076" +
    "\033\075\046\051\053\055\054\072\061\063\001\002\000" +
    "\040\031\121\032\117\033\111\035\123\036\113\037\114" +
    "\040\125\041\115\042\124\043\120\044\116\045\122\047" +
    "\112\050\126\055\240\001\002\000\004\064\241\001\002" +
    "\000\006\023\uffe7\064\uffe7\001\002\000\032\004\067\005" +
    "\056\006\046\007\066\010\073\011\104\022\076\033\075" +
    "\046\051\053\055\054\072\061\063\001\002\000\040\031" +
    "\121\032\117\033\111\035\123\036\113\037\114\040\125" +
    "\041\115\042\124\043\120\044\116\045\122\047\112\050" +
    "\126\055\244\001\002\000\004\064\245\001\002\000\006" +
    "\023\uffe8\064\uffe8\001\002\000\004\011\247\001\002\000" +
    "\010\051\251\055\250\061\042\001\002\000\006\023\uffeb" +
    "\064\uffeb\001\002\000\032\004\067\005\056\006\046\007" +
    "\066\010\073\011\104\022\076\033\075\046\051\053\055" +
    "\054\072\061\063\001\002\000\040\031\121\032\117\033" +
    "\111\035\123\036\113\037\114\040\125\041\115\042\124" +
    "\043\120\044\116\045\122\047\112\050\126\055\253\001" +
    "\002\000\006\023\uffec\064\uffec\001\002\000\006\023\uffee" +
    "\064\uffee\001\002\000\006\023\025\064\257\001\002\000" +
    "\010\002\ufff1\012\ufff1\023\ufff1\001\002\000\010\002\ufff2" +
    "\012\ufff2\023\ufff2\001\002\000\006\002\ufffd\012\007\001" +
    "\002\000\006\002\ufffc\012\007\001\002\000\004\002\001" +
    "\001\002\000\004\011\264\001\002\000\004\063\265\001" +
    "\002\000\004\023\267\001\002\000\004\023\267\001\002" +
    "\000\022\011\037\013\031\014\033\016\035\020\032\025" +
    "\276\026\030\027\040\001\002\000\004\064\313\001\002" +
    "\000\006\023\025\064\ufff9\001\002\000\004\023\273\001" +
    "\002\000\022\011\037\013\031\014\033\016\035\020\032" +
    "\025\276\026\030\027\040\001\002\000\006\023\025\064" +
    "\ufff7\001\002\000\006\023\025\064\ufff6\001\002\000\004" +
    "\027\277\001\002\000\004\021\300\001\002\000\004\061" +
    "\301\001\002\000\004\026\302\001\002\000\004\057\303" +
    "\001\002\000\004\060\304\001\002\000\004\011\305\001" +
    "\002\000\004\062\306\001\002\000\004\063\307\001\002" +
    "\000\052\004\067\005\056\006\046\007\066\010\073\011" +
    "\057\013\031\014\033\016\035\017\101\020\032\022\076" +
    "\026\030\030\064\033\075\046\051\052\047\053\055\054" +
    "\072\061\063\001\002\000\004\064\311\001\002\000\006" +
    "\023\ufff5\064\ufff5\001\002\000\006\023\025\064\ufff8\001" +
    "\002\000\006\002\ufffa\012\ufffa\001\002\000\004\064\315" +
    "\001\002\000\006\002\ufffb\012\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\014\002\004\003\007\004\010\007\005\010" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\257\010\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\012\010\011\001\001\000\002\001\001" +
    "\000\004\010\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\016\012\020\013\021\014\022\001\001" +
    "\000\010\012\253\013\254\014\022\001\001\000\006\032" +
    "\245\033\035\001\001\000\002\001\001\000\004\014\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\033\033\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\042\001\001\000\012\016\222\017\223\032\224\033\035" +
    "\001\001\000\002\001\001\000\036\020\061\021\073\022" +
    "\067\023\076\024\047\025\057\026\051\027\053\030\077" +
    "\031\070\032\052\033\035\034\064\035\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\214\035\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\202\035\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\022\171\023" +
    "\172\024\047\025\057\026\051\027\053\030\077\031\070" +
    "\032\052\033\035\034\064\035\044\001\001\000\006\034" +
    "\170\035\044\001\001\000\002\001\001\000\022\024\160" +
    "\025\057\026\051\027\053\030\077\031\070\034\064\035" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\102\035\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\034\107\035\044\036\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\144\035\044\001\001\000\006\034\143\035\044\001\001" +
    "\000\006\034\142\035\044\001\001\000\006\034\141\035" +
    "\044\001\001\000\006\034\140\035\044\001\001\000\006" +
    "\034\137\035\044\001\001\000\006\034\136\035\044\001" +
    "\001\000\006\034\135\035\044\001\001\000\004\035\133" +
    "\001\001\000\006\034\132\035\044\001\001\000\006\034" +
    "\131\035\044\001\001\000\006\034\130\035\044\001\001" +
    "\000\006\034\127\035\044\001\001\000\006\034\126\035" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\147\035\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\020\152\021\073\022\067" +
    "\023\076\024\047\025\057\026\051\027\053\030\077\031" +
    "\070\032\052\033\035\034\064\035\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\020" +
    "\156\021\073\022\067\023\076\024\047\025\057\026\051" +
    "\027\053\030\077\031\070\032\052\033\035\034\064\035" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\163\035\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\024\160\025\057\026\051\027\053" +
    "\030\077\031\070\034\064\035\044\001\001\000\002\001" +
    "\001\000\006\034\175\035\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\020\200\021\073\022\067\023" +
    "\076\024\047\025\057\026\051\027\053\030\077\031\070" +
    "\032\052\033\035\034\064\035\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\212\035\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\216\035\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\230\032\224\033\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\232\001\001" +
    "\000\002\001\001\000\036\020\234\021\073\022\067\023" +
    "\076\024\047\025\057\026\051\027\053\030\077\031\070" +
    "\032\052\033\035\034\064\035\044\001\001\000\002\001" +
    "\001\000\006\034\236\035\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\242\035" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\232\001\001\000" +
    "\002\001\001\000\006\034\251\035\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\260\010\011\001\001\000\004\010\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\267\006\270\011\265\012\020\013\271\014\022\001" +
    "\001\000\014\005\313\006\270\012\253\013\271\014\022" +
    "\001\001\000\006\032\245\033\035\001\001\000\002\001" +
    "\001\000\006\013\311\014\022\001\001\000\006\006\273" +
    "\014\025\001\001\000\006\032\033\033\035\001\001\000" +
    "\006\013\274\014\022\001\001\000\004\014\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\020" +
    "\307\021\073\022\067\023\076\024\047\025\057\026\051" +
    "\027\053\030\077\031\070\032\052\033\035\034\064\035" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LR1Analyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LR1Analyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LR1Analyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

            nameTableBuilder =  new NameTableBuilder();
            semanticAnalyzer = new  SemanticAnalyzer(nameTableBuilder);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


    private NameTableBuilder nameTableBuilder;
    private SemanticAnalyzer semanticAnalyzer;


    protected NameTableBuilder getNameTableBuilder(){
        return this.nameTableBuilder;
    }
    protected SemanticAnalyzer getSemanticAnalyzer(){
        return this.semanticAnalyzer;
    }

    public Entry getNameTable(){
        return this.nameTableBuilder.getNameTable();
    }


    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        throw new Exception("Syntax error near symbol " + cur_token);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$LR1Analyzer$actions {
  private final LR1Analyzer parser;

  /** Constructor */
  CUP$LR1Analyzer$actions(LR1Analyzer parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$LR1Analyzer$do_action(
    int                        CUP$LR1Analyzer$act_num,
    java_cup.runtime.lr_parser CUP$LR1Analyzer$parser,
    java.util.Stack            CUP$LR1Analyzer$stack,
    int                        CUP$LR1Analyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LR1Analyzer$result;

      /* select the action based on the action number */
      switch (CUP$LR1Analyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // actual_params_list ::= expression 
            {
              Object RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("actual_params_list",28, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // actual_params_list ::= actual_params_list COMMA expression 
            {
              Object RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("actual_params_list",28, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // method_call ::= IDENTIFIER LEFT_PARENTHESIS actual_params_list RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_call",27, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // method_call ::= IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_call",27, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= MINUS expression 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        if(value instanceof Integer){
                                            RESULT = -((Integer)value);
                                        }else if(value instanceof Float){
                                            RESULT = -((Float)value);
                                        } else {
                                            RESULT = "-" + value;
                                        }

                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= BREAK 
            {
              Object RESULT =null;
		
                                       parser.getSemanticAnalyzer().setBreakFlag(true);
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= NEW_KEYWORD IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= CHAR_TYPE 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = value;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= STRING_TYPE 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = value;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= BOOLEAN_TYPE 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = value;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= FLOAT_TYPE 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = value;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= INTEGER_TYPE 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = value;
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression OR expression 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= expression AND expression 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression NOT_EQUAL expression 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression EQUAL expression 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression GREATER_EQUAL expression 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression GREATER expression 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression LOWER_EQUAL expression 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression LOWER expression 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= expression DIVIDE expression 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression TIMES expression 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= LEFT_PARENTHESIS expression RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= EXCLAMATION expression 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= SYSTEM_IN_READ LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression INSTANCEOF expression 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= method_call 
            {
              Object RESULT =null;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression STOP method_call 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		
                                        RESULT = "Need to be calculated";
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // reference_type ::= IDENTIFIER 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = name;
                                    
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("reference_type",25, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= reference_type 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		 RESULT = value; 
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= STRING_KEYWORD 
            {
              String RESULT =null;
		 RESULT = "String"; 
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= INT_KEYWORD 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= FLOAT_KEYWORD 
            {
              String RESULT =null;
		 RESULT = "float"; 
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= CHAR_KEYWORD 
            {
              String RESULT =null;
		 RESULT = "char"; 
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= BOOLEAN_KEYWORD 
            {
              String RESULT =null;
		 RESULT = "boolean"; 
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // output_statement ::= SYSTEM_OUT_PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("output_statement",23, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // method_call_statement ::= expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_call_statement",22, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // while_statement ::= WHILE_KEYWORD LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int innerBlockleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int innerBlockright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry innerBlock = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareWhileStatement(innerBlock);
                                        parser.getSemanticAnalyzer().setBreakFlag(false);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("while_statement",21, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_statement ::= IF_KEYWORD LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS ELSE_KEYWORD LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int thenBlockleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)).left;
		int thenBlockright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)).right;
		Entry thenBlock = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)).value;
		int elseBlockleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int elseBlockright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry elseBlock = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareIfStatement(thenBlock, elseBlock);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("if_statement",20, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-10)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // if_statement ::= IF_KEYWORD LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int thenBlockleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int thenBlockright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry thenBlock = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareIfStatement(thenBlock);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("if_statement",20, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignment_statement ::= IDENTIFIER ASSIGN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("assignment_statement",19, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= output_statement 
            {
              Entry RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= method_call_statement 
            {
              Entry RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= while_statement 
            {
              Entry RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry statement = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = statement;
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= if_statement 
            {
              Entry RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry statement = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = statement;
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= assignment_statement 
            {
              Entry RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statements ::= statement 
            {
              List<Entry> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry statement = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = new LinkedList<Entry>();
                                        if (statement != null){
                                            RESULT.add(statement);
                                        }
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statements",17, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statements ::= statements statement 
            {
              List<Entry> RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> statements = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry statement = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        if (statement != null){
                                            statements.add(statement);
                                        }
                                        RESULT = statements;
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("statements",17, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable_declaration ::= type IDENTIFIER ASSIGN expression SEMICOLON 
            {
              Entry RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareVariable(name, type);
                                    
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("variable_declaration",16, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable_declaration ::= type IDENTIFIER SEMICOLON 
            {
              Entry RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareVariable(name, type);
                                    
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("variable_declaration",16, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variables_declaration ::= variable_declaration 
            {
              List<Entry> RESULT =null;
		int variableEntryleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int variableEntryright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry variableEntry = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(variableEntry);
                                  
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("variables_declaration",15, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variables_declaration ::= variables_declaration variable_declaration 
            {
              List<Entry> RESULT =null;
		int variablesEntriesListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int variablesEntriesListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> variablesEntriesList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int variableEntryleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int variableEntryright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry variableEntry = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        variablesEntriesList.add(variableEntry);
                                        RESULT = variablesEntriesList;
                                    
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("variables_declaration",15, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // block ::= statements 
            {
              Entry RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		List<Entry> statements = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                       RESULT = parser.getNameTableBuilder().declareBlock(null, statements);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("block",14, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // block ::= variables_declaration statements 
            {
              Entry RESULT =null;
		int variablesEntriesListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int variablesEntriesListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> variablesEntriesList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		List<Entry> statements = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                       RESULT = parser.getNameTableBuilder().declareBlock(variablesEntriesList, statements);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("block",14, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // block ::= variables_declaration 
            {
              Entry RESULT =null;
		int variablesEntriesListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int variablesEntriesListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		List<Entry> variablesEntriesList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                       RESULT = parser.getNameTableBuilder().declareBlock(variablesEntriesList);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("block",14, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // param_declaration ::= type IDENTIFIER 
            {
              Entry RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                           RESULT = parser.getNameTableBuilder().declareMethodParameter(name, type);
                                     
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("param_declaration",13, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // params_list_declaration ::= param_declaration 
            {
              List<Entry> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry param = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(param);
                                    
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("params_list_declaration",12, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params_list_declaration ::= params_list_declaration COMMA param_declaration 
            {
              List<Entry> RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		List<Entry> paramsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry param = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        paramsList.add(param);
                                        RESULT = paramsList;
                                    
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("params_list_declaration",12, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // method_params_declaration ::= LEFT_PARENTHESIS params_list_declaration RIGHT_PARENTHESIS 
            {
              List<Entry> RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> paramsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = paramsList;
                                    
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_params_declaration",11, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // method_params_declaration ::= LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              List<Entry> RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_params_declaration",11, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // method_declaration ::= PUBLIC_KEYWORD VOID_KEYWORD IDENTIFIER method_params_declaration LEFT_FIG_PARENTHESIS RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		List<Entry> paramsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareMethod(name, "void", paramsList);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_declaration",10, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // method_declaration ::= PUBLIC_KEYWORD VOID_KEYWORD IDENTIFIER method_params_declaration LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).right;
		List<Entry> paramsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).value;
		int innerBlockleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int innerBlockright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry innerBlock = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareMethod(name, "void", paramsList, innerBlock);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_declaration",10, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // method_declaration ::= PUBLIC_KEYWORD type IDENTIFIER method_params_declaration LEFT_FIG_PARENTHESIS RETURN_KEYWORD expression SEMICOLON RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-7)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-7)).right;
		String returnType = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)).right;
		List<Entry> paramsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareMethod(name, returnType, paramsList);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_declaration",10, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-8)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // method_declaration ::= PUBLIC_KEYWORD type IDENTIFIER method_params_declaration LEFT_FIG_PARENTHESIS block RETURN_KEYWORD expression SEMICOLON RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-8)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-8)).right;
		String returnType = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-7)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)).right;
		List<Entry> paramsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)).value;
		int innerBlockleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).left;
		int innerBlockright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).right;
		Entry innerBlock = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareMethod(name, returnType, paramsList, innerBlock);
                                        parser.getSemanticAnalyzer().checkNotUsedBreak();
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("method_declaration",10, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-9)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // methods_declaration ::= method_declaration 
            {
              List<Entry> RESULT =null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry method = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(method);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("methods_declaration",9, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // methods_declaration ::= methods_declaration method_declaration 
            {
              List<Entry> RESULT =null;
		int methodsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int methodsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> methodsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int methodleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry method = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        methodsList.add(method);
                                        RESULT = methodsList;
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("methods_declaration",9, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // field_declaration ::= PUBLIC_KEYWORD type IDENTIFIER SEMICOLON 
            {
              Entry RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareField(name, type);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("field_declaration",8, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // field_declaration ::= PUBLIC_KEYWORD type IDENTIFIER ASSIGN expression SEMICOLON 
            {
              Entry RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareField(name, type, value);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("field_declaration",8, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fields_declaration ::= field_declaration 
            {
              List<Entry> RESULT =null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry field = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(field);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("fields_declaration",7, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fields_declaration ::= fields_declaration field_declaration 
            {
              List<Entry> RESULT =null;
		int fieldsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int fieldsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> fieldsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry field = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        fieldsList.add(field);
                                        RESULT = fieldsList;
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("fields_declaration",7, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // class_declaration ::= CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareClass(name, null, null);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("class_declaration",6, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // class_declaration ::= CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS methods_declaration RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).value;
		int methodsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int methodsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> methodsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareClass(name, null, methodsList);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("class_declaration",6, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // class_declaration ::= CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS fields_declaration RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).value;
		int fieldsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int fieldsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> fieldsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareClass(name, fieldsList, null);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("class_declaration",6, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // class_declaration ::= CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS fields_declaration methods_declaration RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).value;
		int fieldsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int fieldsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		List<Entry> fieldsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		int methodsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int methodsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> methodsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareClass(name, fieldsList, methodsList);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("class_declaration",6, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // classes_declaration ::= class_declaration 
            {
              List<Entry> RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry classDeclaration = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(classDeclaration);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("classes_declaration",5, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // classes_declaration ::= classes_declaration class_declaration 
            {
              List<Entry> RESULT =null;
		int classesListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int classesListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> classesList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry classDeclaration = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        classesList.add(classDeclaration);
                                        RESULT = classesList;
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("classes_declaration",5, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // main_method_declaration ::= PUBLIC_KEYWORD STATIC_KEYWORD VOID_KEYWORD MAIN_KEYWORD LEFT_PARENTHESIS STRING_KEYWORD LEFT_SQUARE_PARENTHESIS RIGHT_SQUARE_PARENTHESIS IDENTIFIER RIGHT_PARENTHESIS LEFT_FIG_PARENTHESIS block RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int innerBlockleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int innerBlockright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry innerBlock = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareMainMethod(innerBlock);
                                    
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_method_declaration",4, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-12)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // main_class_methods_declaration ::= methods_declaration main_method_declaration methods_declaration 
            {
              List<Entry> RESULT =null;
		int methodsListBeforeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int methodsListBeforeright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		List<Entry> methodsListBefore = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		int mainMethodleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int mainMethodright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry mainMethod = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int methodsListAfterleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int methodsListAfterright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		List<Entry> methodsListAfter = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = methodsListBefore;
                                        RESULT.add(mainMethod);
                                        RESULT.addAll(methodsListAfter);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class_methods_declaration",3, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main_class_methods_declaration ::= methods_declaration main_method_declaration 
            {
              List<Entry> RESULT =null;
		int methodsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int methodsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> methodsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int mainMethodleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int mainMethodright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry mainMethod = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = methodsList;
                                        RESULT.add(mainMethod);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class_methods_declaration",3, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // main_class_methods_declaration ::= main_method_declaration methods_declaration 
            {
              List<Entry> RESULT =null;
		int mainMethodleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int mainMethodright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry mainMethod = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int methodsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int methodsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		List<Entry> methodsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = methodsList;
                                        RESULT.add(mainMethod);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class_methods_declaration",3, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // main_class_methods_declaration ::= main_method_declaration 
            {
              List<Entry> RESULT =null;
		int mainMethodleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int mainMethodright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry mainMethod = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        RESULT = new LinkedList<Entry>();
                                        RESULT.add(mainMethod);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class_methods_declaration",3, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main_class ::= PUBLIC_KEYWORD CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS main_class_methods_declaration RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-3)).value;
		int methodsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int methodsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> methodsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareMainClass(name, null, methodsList);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class",2, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-5)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main_class ::= PUBLIC_KEYWORD CLASS_KEYWORD IDENTIFIER LEFT_FIG_PARENTHESIS fields_declaration main_class_methods_declaration RIGHT_FIG_PARENTHESIS 
            {
              Entry RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-4)).value;
		int fieldsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int fieldsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		List<Entry> fieldsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		int methodsListleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int methodsListright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> methodsList = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		
                                        RESULT = parser.getNameTableBuilder().declareMainClass(name, fieldsList, methodsList);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("main_class",2, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-6)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // compilation_unit ::= classes_declaration main_class classes_declaration 
            {
              Object RESULT =null;
		int classesListBeforeleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).left;
		int classesListBeforeright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).right;
		List<Entry> classesListBefore = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)).value;
		int mainClassleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int mainClassright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry mainClass = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int classesListAfterleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int classesListAfterright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		List<Entry> classesListAfter = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        List<Entry> classes = classesListBefore;
                                        classes.add(mainClass);
                                        classes.addAll(classesListAfter);
                                        parser.getNameTableBuilder().declareProgram(classes);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("compilation_unit",1, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-2)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // compilation_unit ::= classes_declaration main_class 
            {
              Object RESULT =null;
		int classesleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int classesright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		List<Entry> classes = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int mainClassleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int mainClassright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry mainClass = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        classes.add(mainClass);
                                        parser.getNameTableBuilder().declareProgram(classes);

                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("compilation_unit",1, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // compilation_unit ::= main_class classes_declaration 
            {
              Object RESULT =null;
		int mainClassleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int mainClassright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Entry mainClass = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		int classesleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int classesright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		List<Entry> classes = (List<Entry>)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        classes.add(mainClass);
                                        parser.getNameTableBuilder().declareProgram(classes);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("compilation_unit",1, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // compilation_unit ::= main_class 
            {
              Object RESULT =null;
		int mainClassleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).left;
		int mainClassright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()).right;
		Entry mainClass = (Entry)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.peek()).value;
		
                                        List<Entry> classes = new LinkedList<Entry>();
                                        classes.add(mainClass);
                                        parser.getNameTableBuilder().declareProgram(classes);
                                   
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("compilation_unit",1, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= compilation_unit 
            {
              Object RESULT =null;

              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          return CUP$LR1Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)).value;
		RESULT = start_val;
              CUP$LR1Analyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.elementAt(CUP$LR1Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$LR1Analyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LR1Analyzer$parser.done_parsing();
          return CUP$LR1Analyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

